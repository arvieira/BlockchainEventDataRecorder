{"version":3,"file":"vega-transforms.min.js","sources":["../src/util/AggregateKeys.js","../src/util/AggregateOps.js","../src/util/TupleStore.js","../src/Aggregate.js","../src/Bin.js","../src/util/SortedList.js","../src/Collect.js","../src/Compare.js","../src/CountPattern.js","../src/Cross.js","../src/util/Distributions.js","../src/Density.js","../src/util/util.js","../src/DotBin.js","../src/Expression.js","../src/Extent.js","../src/Subflow.js","../src/Facet.js","../src/Field.js","../src/Filter.js","../src/Flatten.js","../src/Fold.js","../src/Formula.js","../src/Generate.js","../../../node_modules/d3-array/src/ascending.js","../../../node_modules/d3-array/src/sort.js","../../../node_modules/d3-array/src/max.js","../../../node_modules/d3-array/src/min.js","../../../node_modules/d3-array/src/quickselect.js","../../../node_modules/d3-array/src/quantile.js","../../../node_modules/d3-array/src/number.js","../../../node_modules/d3-array/src/range.js","../src/Impute.js","../../../node_modules/d3-array/src/median.js","../../../node_modules/d3-array/src/mean.js","../src/JoinAggregate.js","../src/KDE.js","../src/Key.js","../src/Load.js","../src/Lookup.js","../src/MultiExtent.js","../src/MultiValues.js","../src/Params.js","../src/Pivot.js","../src/PreFacet.js","../src/Project.js","../src/Proxy.js","../src/Quantile.js","../src/Relay.js","../src/Sample.js","../src/Sequence.js","../src/Sieve.js","../src/TimeUnit.js","../src/TupleIndex.js","../src/Values.js","../src/util/WindowOps.js","../src/util/WindowState.js","../src/Window.js","../../../node_modules/d3-array/src/bisector.js"],"sourcesContent":["export function multikey(f) {\n  return x => {\n    const n = f.length;\n    let i = 1,\n        k = String(f[0](x));\n\n    for (; i<n; ++i) {\n      k += '|' + f[i](x);\n    }\n\n    return k;\n  };\n}\n\nexport function groupkey(fields) {\n  return !fields || !fields.length ? function() { return ''; }\n    : fields.length === 1 ? fields[0]\n    : multikey(fields);\n}\n","import {extend, identity} from 'vega-util';\n\nexport function measureName(op, field, as) {\n  return as || (op + (!field ? '' : '_' + field));\n}\n\nconst noop = () => {};\n\nconst base_op = {\n  init: noop,\n  add:  noop,\n  rem:  noop,\n  idx:  0\n};\n\nexport const AggregateOps = {\n  values: {\n    init:  m => m.cell.store = true,\n    value: m => m.cell.data.values(),\n    idx:  -1\n  },\n  count: {\n    value: m => m.cell.num\n  },\n  __count__: {\n    value: m => m.missing + m.valid\n  },\n  missing: {\n    value: m => m.missing\n  },\n  valid: {\n    value: m => m.valid\n  },\n  sum: {\n    init:  m => m.sum = 0,\n    value: m => m.sum,\n    add:  (m, v) => m.sum += +v,\n    rem:  (m, v) => m.sum -= v\n  },\n  product: {\n    init:  m => m.product = 1,\n    value: m => m.valid ? m.product : undefined,\n    add:  (m, v) => m.product *= v,\n    rem:  (m, v) => m.product /= v\n  },\n  mean: {\n    init:  m => m.mean = 0,\n    value: m => m.valid ? m.mean : undefined,\n    add:  (m, v) => (m.mean_d = v - m.mean, m.mean += m.mean_d / m.valid),\n    rem:  (m, v) => (m.mean_d = v - m.mean, m.mean -= m.valid ? m.mean_d / m.valid : m.mean)\n  },\n  average: {\n    value: m => m.valid ? m.mean : undefined,\n    req:  ['mean'], idx: 1\n  },\n  variance: {\n    init:  m => m.dev = 0,\n    value: m => m.valid > 1 ? m.dev / (m.valid - 1) : undefined,\n    add:  (m, v) => m.dev += m.mean_d * (v - m.mean),\n    rem:  (m, v) => m.dev -= m.mean_d * (v - m.mean),\n    req:  ['mean'], idx: 1\n  },\n  variancep: {\n    value: m => m.valid > 1 ? m.dev / m.valid : undefined,\n    req:  ['variance'], idx: 2\n  },\n  stdev: {\n    value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid - 1)) : undefined,\n    req:  ['variance'], idx: 2\n  },\n  stdevp: {\n    value: m => m.valid > 1 ? Math.sqrt(m.dev / m.valid) : undefined,\n    req:  ['variance'], idx: 2\n  },\n  stderr: {\n    value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid * (m.valid - 1))) : undefined,\n    req:  ['variance'], idx: 2\n  },\n  distinct: {\n    value: m => m.cell.data.distinct(m.get),\n    req:  ['values'], idx: 3\n  },\n  ci0: {\n    value: m => m.cell.data.ci0(m.get),\n    req:  ['values'], idx: 3\n  },\n  ci1: {\n    value: m => m.cell.data.ci1(m.get),\n    req:  ['values'], idx: 3\n  },\n  median: {\n    value: m => m.cell.data.q2(m.get),\n    req:  ['values'], idx: 3\n  },\n  q1: {\n    value: m => m.cell.data.q1(m.get),\n    req: ['values'], idx: 3\n  },\n  q3: {\n    value: m => m.cell.data.q3(m.get),\n    req:  ['values'], idx: 3\n  },\n  min: {\n    init:  m => m.min = undefined,\n    value: m => m.min = (Number.isNaN(m.min) ? m.cell.data.min(m.get) : m.min),\n    add:  (m, v) => { if (v < m.min || m.min === undefined) m.min = v; },\n    rem:  (m, v) => { if (v <= m.min) m.min = NaN; },\n    req:  ['values'], idx: 4\n  },\n  max: {\n    init:  m => m.max = undefined,\n    value: m => m.max = (Number.isNaN(m.max) ? m.cell.data.max(m.get) : m.max),\n    add:  (m, v) => { if (v > m.max || m.max === undefined) m.max = v; },\n    rem:  (m, v) => { if (v >= m.max) m.max = NaN; },\n    req:  ['values'], idx: 4\n  },\n  argmin: {\n    init:  m => m.argmin = undefined,\n    value: m => m.argmin || m.cell.data.argmin(m.get),\n    add:  (m, v, t) => { if (v < m.min) m.argmin = t; },\n    rem:  (m, v) => { if (v <= m.min) m.argmin = undefined; },\n    req:  ['min', 'values'], idx: 3\n  },\n  argmax: {\n    init:  m => m.argmax = undefined,\n    value: m => m.argmax || m.cell.data.argmax(m.get),\n    add:  (m, v, t) => { if (v > m.max) m.argmax = t; },\n    rem:  (m, v) => { if (v >= m.max) m.argmax = undefined; },\n    req:  ['max', 'values'], idx: 3\n  }\n};\n\nexport const ValidAggregateOps = Object.keys(AggregateOps);\n\nfunction measure(key, value) {\n  return out => extend({\n    name: key,\n    out: out || key\n  }, base_op, value);\n}\n\nValidAggregateOps.forEach(key => {\n  AggregateOps[key] = measure(key, AggregateOps[key]);\n});\n\nexport function createMeasure(op, name) {\n  return AggregateOps[op](name);\n}\n\nfunction compareIndex(a, b) {\n  return a.idx - b.idx;\n}\n\nfunction resolve(agg) {\n  const map = {};\n  agg.forEach(a => map[a.name] = a);\n\n  const getreqs = a => {\n    if (!a.req) return;\n    a.req.forEach(key => {\n      if (!map[key]) getreqs(map[key] = AggregateOps[key]());\n    });\n  };\n  agg.forEach(getreqs);\n\n  return Object.values(map).sort(compareIndex);\n}\n\nfunction init() {\n  this.valid = 0;\n  this.missing = 0;\n  this._ops.forEach(op => op.init(this));\n}\n\nfunction add(v, t) {\n  if (v == null || v === '') { ++this.missing; return; }\n  if (v !== v) return;\n  ++this.valid;\n  this._ops.forEach(op => op.add(this, v, t));\n}\n\nfunction rem(v, t) {\n  if (v == null || v === '') { --this.missing; return; }\n  if (v !== v) return;\n  --this.valid;\n  this._ops.forEach(op => op.rem(this, v, t));\n}\n\nfunction set(t) {\n  this._out.forEach(op => t[op.out] = op.value(this));\n  return t;\n}\n\nexport function compileMeasures(agg, field) {\n  const get = field || identity,\n        ops = resolve(agg),\n        out = agg.slice().sort(compareIndex);\n\n  function ctr(cell) {\n    this._ops = ops;\n    this._out = out;\n    this.cell = cell;\n    this.init();\n  }\n\n  ctr.prototype.init = init;\n  ctr.prototype.add = add;\n  ctr.prototype.rem = rem;\n  ctr.prototype.set = set;\n  ctr.prototype.get = get;\n  ctr.fields = agg.map(op => op.out);\n\n  return ctr;\n}\n","import {tupleid} from 'vega-dataflow';\nimport {bootstrapCI, quartiles} from 'vega-statistics';\nimport {extentIndex, field, hasOwnProperty} from 'vega-util';\n\nexport default function TupleStore(key) {\n  this._key = key ? field(key) : tupleid;\n  this.reset();\n}\n\nconst prototype = TupleStore.prototype;\n\nprototype.reset = function() {\n  this._add = [];\n  this._rem = [];\n  this._ext = null;\n  this._get = null;\n  this._q = null;\n};\n\nprototype.add = function(v) {\n  this._add.push(v);\n};\n\nprototype.rem = function(v) {\n  this._rem.push(v);\n};\n\nprototype.values = function() {\n  this._get = null;\n  if (this._rem.length === 0) return this._add;\n\n  const a = this._add,\n        r = this._rem,\n        k = this._key,\n        n = a.length,\n        m = r.length,\n        x = Array(n - m),\n        map = {};\n  let i, j, v;\n\n  // use unique key field to clear removed values\n  for (i=0; i<m; ++i) {\n    map[k(r[i])] = 1;\n  }\n  for (i=0, j=0; i<n; ++i) {\n    if (map[k(v = a[i])]) {\n      map[k(v)] = 0;\n    } else {\n      x[j++] = v;\n    }\n  }\n\n  this._rem = [];\n  return (this._add = x);\n};\n\n// memoizing statistics methods\n\nprototype.distinct = function(get) {\n  const v = this.values(),\n        map = {};\n\n  let n = v.length,\n      count = 0, s;\n\n  while (--n >= 0) {\n    s = get(v[n]) + '';\n    if (!hasOwnProperty(map, s)) {\n      map[s] = 1;\n      ++count;\n    }\n  }\n\n  return count;\n};\n\nprototype.extent = function(get) {\n  if (this._get !== get || !this._ext) {\n    const v = this.values(),\n          i = extentIndex(v, get);\n    this._ext = [v[i[0]], v[i[1]]];\n    this._get = get;\n  }\n  return this._ext;\n};\n\nprototype.argmin = function(get) {\n  return this.extent(get)[0] || {};\n};\n\nprototype.argmax = function(get) {\n  return this.extent(get)[1] || {};\n};\n\nprototype.min = function(get) {\n  const m = this.extent(get)[0];\n  return m != null ? get(m) : undefined;\n};\n\nprototype.max = function(get) {\n  const m = this.extent(get)[1];\n  return m != null ? get(m) : undefined;\n};\n\nprototype.quartile = function(get) {\n  if (this._get !== get || !this._q) {\n    this._q = quartiles(this.values(), get);\n    this._get = get;\n  }\n  return this._q;\n};\n\nprototype.q1 = function(get) {\n  return this.quartile(get)[0];\n};\n\nprototype.q2 = function(get) {\n  return this.quartile(get)[1];\n};\n\nprototype.q3 = function(get) {\n  return this.quartile(get)[2];\n};\n\nprototype.ci = function(get) {\n  if (this._get !== get || !this._ci) {\n    this._ci = bootstrapCI(this.values(), 1000, 0.05, get);\n    this._get = get;\n  }\n  return this._ci;\n};\n\nprototype.ci0 = function(get) {\n  return this.ci(get)[0];\n};\n\nprototype.ci1 = function(get) {\n  return this.ci(get)[1];\n};\n","import {groupkey} from './util/AggregateKeys';\nimport {ValidAggregateOps, compileMeasures, createMeasure, measureName} from './util/AggregateOps';\nimport TupleStore from './util/TupleStore';\nimport {Transform, ingest, replace} from 'vega-dataflow';\nimport {accessorFields, accessorName, array, error, inherits} from 'vega-util';\n\n/**\n * Group-by aggregation operator.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.\n * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.\n * @param {Array<string>} [params.as] - An array of output field names for aggregated values.\n * @param {boolean} [params.cross=false] - A flag indicating that the full\n *   cross-product of groupby values should be generated, including empty cells.\n *   If true, the drop parameter is ignored and empty cells are retained.\n * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.\n */\nexport default function Aggregate(params) {\n  Transform.call(this, null, params);\n\n  this._adds = []; // array of added output tuples\n  this._mods = []; // array of modified output tuples\n  this._alen = 0;  // number of active added tuples\n  this._mlen = 0;  // number of active modified tuples\n  this._drop = true;   // should empty aggregation cells be removed\n  this._cross = false; // produce full cross-product of group-by values\n\n  this._dims = [];   // group-by dimension accessors\n  this._dnames = []; // group-by dimension names\n\n  this._measures = []; // collection of aggregation monoids\n  this._countOnly = false; // flag indicating only count aggregation\n  this._counts = null; // collection of count fields\n  this._prev = null;   // previous aggregation cells\n\n  this._inputs = null;  // array of dependent input tuple field names\n  this._outputs = null; // array of output tuple field names\n}\n\nAggregate.Definition = {\n  'type': 'Aggregate',\n  'metadata': {'generates': true, 'changes': true},\n  'params': [\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'ops', 'type': 'enum', 'array': true, 'values': ValidAggregateOps },\n    { 'name': 'fields', 'type': 'field', 'null': true, 'array': true },\n    { 'name': 'as', 'type': 'string', 'null': true, 'array': true },\n    { 'name': 'drop', 'type': 'boolean', 'default': true },\n    { 'name': 'cross', 'type': 'boolean', 'default': false },\n    { 'name': 'key', 'type': 'field' }\n  ]\n};\n\ninherits(Aggregate, Transform, {\n  transform(_, pulse) {\n    const aggr = this,\n          out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n          mod = _.modified();\n\n    aggr.stamp = out.stamp;\n\n    if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n      aggr._prev = aggr.value;\n      aggr.value = mod ? aggr.init(_) : {};\n      pulse.visit(pulse.SOURCE, t => aggr.add(t));\n    } else {\n      aggr.value = aggr.value || aggr.init(_);\n      pulse.visit(pulse.REM, t => aggr.rem(t));\n      pulse.visit(pulse.ADD, t => aggr.add(t));\n    }\n\n    // Indicate output fields and return aggregate tuples.\n    out.modifies(aggr._outputs);\n\n    // Should empty cells be dropped?\n    aggr._drop = _.drop !== false;\n\n    // If domain cross-product requested, generate empty cells as needed\n    // and ensure that empty cells are not dropped\n    if (_.cross && aggr._dims.length > 1) {\n      aggr._drop = false;\n      aggr.cross();\n    }\n\n    if (pulse.clean() && aggr._drop) {\n      out.clean(true).runAfter(() => this.clean());\n    }\n\n    return aggr.changes(out);\n  },\n\n  cross() {\n    const aggr = this,\n          curr = aggr.value,\n          dims = aggr._dnames,\n          vals = dims.map(() => ({})),\n          n = dims.length;\n\n    // collect all group-by domain values\n    function collect(cells) {\n      let key, i, t, v;\n      for (key in cells) {\n        t = cells[key].tuple;\n        for (i=0; i<n; ++i) {\n          vals[i][(v = t[dims[i]])] = v;\n        }\n      }\n    }\n    collect(aggr._prev);\n    collect(curr);\n\n    // iterate over key cross-product, create cells as needed\n    function generate(base, tuple, index) {\n      const name = dims[index],\n          v = vals[index++];\n\n      for (const k in v) {\n        const key = base ? base + '|' + k : k;\n        tuple[name] = v[k];\n        if (index < n) generate(key, tuple, index);\n        else if (!curr[key]) aggr.cell(key, tuple);\n      }\n    }\n    generate('', {}, 0);\n  },\n\n  init(_) {\n    // initialize input and output fields\n    const inputs = (this._inputs = []),\n          outputs = (this._outputs = []),\n          inputMap = {};\n\n    function inputVisit(get) {\n      const fields = array(accessorFields(get)),\n            n = fields.length;\n      let i = 0, f;\n      for (; i<n; ++i) {\n        if (!inputMap[f=fields[i]]) {\n          inputMap[f] = 1;\n          inputs.push(f);\n        }\n      }\n    }\n\n    // initialize group-by dimensions\n    this._dims = array(_.groupby);\n    this._dnames = this._dims.map(d => {\n      const dname = accessorName(d);\n      inputVisit(d);\n      outputs.push(dname);\n      return dname;\n    });\n    this.cellkey = _.key ? _.key : groupkey(this._dims);\n\n    // initialize aggregate measures\n    this._countOnly = true;\n    this._counts = [];\n    this._measures = [];\n\n    const fields = _.fields || [null],\n          ops = _.ops || ['count'],\n          as = _.as || [],\n          n = fields.length,\n          map = {};\n    let field, op, m, mname, outname, i;\n\n    if (n !== ops.length) {\n      error('Unmatched number of fields and aggregate ops.');\n    }\n\n    for (i=0; i<n; ++i) {\n      field = fields[i];\n      op = ops[i];\n\n      if (field == null && op !== 'count') {\n        error('Null aggregate field specified.');\n      }\n      mname = accessorName(field);\n      outname = measureName(op, mname, as[i]);\n      outputs.push(outname);\n\n      if (op === 'count') {\n        this._counts.push(outname);\n        continue;\n      }\n\n      m = map[mname];\n      if (!m) {\n        inputVisit(field);\n        m = (map[mname] = []);\n        m.field = field;\n        this._measures.push(m);\n      }\n\n      if (op !== 'count') this._countOnly = false;\n      m.push(createMeasure(op, outname));\n    }\n\n    this._measures = this._measures.map(m => compileMeasures(m, m.field));\n\n    return {}; // aggregation cells (this.value)\n  },\n\n  // -- Cell Management -----\n\n  cellkey: groupkey(),\n\n  cell(key, t) {\n    let cell = this.value[key];\n    if (!cell) {\n      cell = this.value[key] = this.newcell(key, t);\n      this._adds[this._alen++] = cell;\n    } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {\n      cell.stamp = this.stamp;\n      this._adds[this._alen++] = cell;\n    } else if (cell.stamp < this.stamp) {\n      cell.stamp = this.stamp;\n      this._mods[this._mlen++] = cell;\n    }\n    return cell;\n  },\n\n  newcell(key, t) {\n    const cell = {\n      key:   key,\n      num:   0,\n      agg:   null,\n      tuple: this.newtuple(t, this._prev && this._prev[key]),\n      stamp: this.stamp,\n      store: false\n    };\n\n    if (!this._countOnly) {\n      const measures = this._measures,\n            n = measures.length;\n\n      cell.agg = Array(n);\n      for (let i=0; i<n; ++i) {\n        cell.agg[i] = new measures[i](cell);\n      }\n    }\n\n    if (cell.store) {\n      cell.data = new TupleStore();\n    }\n\n    return cell;\n  },\n\n  newtuple(t, p) {\n    const names = this._dnames,\n          dims = this._dims,\n          n = dims.length,\n          x = {};\n\n    for (let i=0; i<n; ++i) {\n      x[names[i]] = dims[i](t);\n    }\n\n    return p ? replace(p.tuple, x) : ingest(x);\n  },\n\n  clean() {\n    const cells = this.value;\n    for (const key in cells) {\n      if (cells[key].num === 0) {\n        delete cells[key];\n      }\n    }\n  },\n\n  // -- Process Tuples -----\n\n  add(t) {\n    const key = this.cellkey(t),\n          cell = this.cell(key, t);\n\n    cell.num += 1;\n    if (this._countOnly) return;\n\n    if (cell.store) cell.data.add(t);\n\n    const agg = cell.agg;\n    for (let i=0, n=agg.length; i<n; ++i) {\n      agg[i].add(agg[i].get(t), t);\n    }\n  },\n\n  rem(t) {\n    const key = this.cellkey(t),\n          cell = this.cell(key, t);\n\n    cell.num -= 1;\n    if (this._countOnly) return;\n\n    if (cell.store) cell.data.rem(t);\n\n    const agg = cell.agg;\n    for (let i=0, n=agg.length; i<n; ++i) {\n      agg[i].rem(agg[i].get(t), t);\n    }\n  },\n\n  celltuple(cell) {\n    const tuple = cell.tuple,\n          counts = this._counts;\n\n    // consolidate stored values\n    if (cell.store) {\n      cell.data.values();\n    }\n\n    // update tuple properties\n    for (let i=0, n=counts.length; i<n; ++i) {\n      tuple[counts[i]] = cell.num;\n    }\n    if (!this._countOnly) {\n      const agg = cell.agg;\n      for (let i=0, n=agg.length; i<n; ++i) {\n        agg[i].set(tuple);\n      }\n    }\n\n    return tuple;\n  },\n\n  changes(out) {\n    const adds = this._adds,\n          mods = this._mods,\n          prev = this._prev,\n          drop = this._drop,\n          add = out.add,\n          rem = out.rem,\n          mod = out.mod;\n\n    let cell, key, i, n;\n\n    if (prev) for (key in prev) {\n      cell = prev[key];\n      if (!drop || cell.num) rem.push(cell.tuple);\n    }\n\n    for (i=0, n=this._alen; i<n; ++i) {\n      add.push(this.celltuple(adds[i]));\n      adds[i] = null; // for garbage collection\n    }\n\n    for (i=0, n=this._mlen; i<n; ++i) {\n      cell = mods[i];\n      (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));\n      mods[i] = null; // for garbage collection\n    }\n\n    this._alen = this._mlen = 0; // reset list of active cells\n    this._prev = null;\n    return out;\n  }\n});\n","import {Transform} from 'vega-dataflow';\nimport {bin} from 'vega-statistics';\nimport {accessor, accessorFields, accessorName, inherits, toNumber} from 'vega-util';\n\n// epsilon bias to offset floating point error (#1737)\nconst EPSILON = 1e-14;\n\n/**\n * Generates a binning function for discretizing data.\n * @constructor\n * @param {object} params - The parameters for this operator. The\n *   provided values should be valid options for the {@link bin} function.\n * @param {function(object): *} params.field - The data field to bin.\n */\nexport default function Bin(params) {\n  Transform.call(this, null, params);\n}\n\nBin.Definition = {\n  'type': 'Bin',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'interval', 'type': 'boolean', 'default': true },\n    { 'name': 'anchor', 'type': 'number' },\n    { 'name': 'maxbins', 'type': 'number', 'default': 20 },\n    { 'name': 'base', 'type': 'number', 'default': 10 },\n    { 'name': 'divide', 'type': 'number', 'array': true, 'default': [5, 2] },\n    { 'name': 'extent', 'type': 'number', 'array': true, 'length': 2, 'required': true },\n    { 'name': 'span', 'type': 'number' },\n    { 'name': 'step', 'type': 'number' },\n    { 'name': 'steps', 'type': 'number', 'array': true },\n    { 'name': 'minstep', 'type': 'number', 'default': 0 },\n    { 'name': 'nice', 'type': 'boolean', 'default': true },\n    { 'name': 'name', 'type': 'string' },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': ['bin0', 'bin1'] }\n  ]\n};\n\ninherits(Bin, Transform, {\n  transform(_, pulse) {\n    const band = _.interval !== false,\n        bins = this._bins(_),\n        start = bins.start,\n        step = bins.step,\n        as = _.as || ['bin0', 'bin1'],\n        b0 = as[0],\n        b1 = as[1];\n\n    let flag;\n    if (_.modified()) {\n      pulse = pulse.reflow(true);\n      flag = pulse.SOURCE;\n    } else {\n      flag = pulse.modified(accessorFields(_.field)) ? pulse.ADD_MOD : pulse.ADD;\n    }\n\n    pulse.visit(flag, band\n      ? t => {\n          const v = bins(t);\n          // minimum bin value (inclusive)\n          t[b0] = v;\n          // maximum bin value (exclusive)\n          // use convoluted math for better floating point agreement\n          // see https://github.com/vega/vega/issues/830\n          // infinite values propagate through this formula! #2227\n          t[b1] = v == null ? null : start + step * (1 + (v - start) / step);\n        }\n      : t => t[b0] = bins(t)\n    );\n\n    return pulse.modifies(band ? as : b0);\n  },\n\n  _bins(_) {\n    if (this.value && !_.modified()) {\n      return this.value;\n    }\n\n    const field = _.field,\n          bins  = bin(_),\n          step  = bins.step;\n    let start = bins.start,\n        stop  = start + Math.ceil((bins.stop - start) / step) * step,\n        a, d;\n\n    if ((a = _.anchor) != null) {\n      d = a - (start + step * Math.floor((a - start) / step));\n      start += d;\n      stop += d;\n    }\n\n    const f = function(t) {\n      let v = toNumber(field(t));\n      return v == null ? null\n        : v < start ? -Infinity\n        : v > stop ? +Infinity\n        : (\n            v = Math.max(start, Math.min(v, stop - step)),\n            start + step * Math.floor(EPSILON + (v - start) / step)\n          );\n    };\n\n    f.start = start;\n    f.stop = bins.stop;\n    f.step = step;\n\n    return this.value = accessor(\n      f,\n      accessorFields(field),\n      _.name || 'bin_' + accessorName(field)\n    );\n  }\n});\n","import {merge} from 'vega-util';\n\nexport default function(idFunc, source, input) {\n  const $ = idFunc;\n  let data = source || [],\n      add = input || [],\n      rem = {},\n      cnt = 0;\n\n  return {\n    add: t => add.push(t),\n    remove: t => rem[$(t)] = ++cnt,\n    size: () => data.length,\n    data: (compare, resort) => {\n      if (cnt) {\n        data = data.filter(t => !rem[$(t)]);\n        rem = {};\n        cnt = 0;\n      }\n      if (resort && compare) {\n        data.sort(compare);\n      }\n      if (add.length) {\n        data = compare\n          ? merge(compare, data, add.sort(compare))\n          : data.concat(add);\n        add = [];\n      }\n      return data;\n    }\n  };\n}","import SortedList from './util/SortedList';\nimport {Transform, stableCompare, tupleid} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Collects all data tuples that pass through this operator.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(*,*): number} [params.sort] - An optional\n *   comparator function for additionally sorting the collected tuples.\n */\nexport default function Collect(params) {\n  Transform.call(this, [], params);\n}\n\nCollect.Definition = {\n  'type': 'Collect',\n  'metadata': {'source': true},\n  'params': [\n    { 'name': 'sort', 'type': 'compare' }\n  ]\n};\n\ninherits(Collect, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.ALL),\n          list = SortedList(tupleid, this.value, out.materialize(out.ADD).add),\n          sort = _.sort,\n          mod = pulse.changed() || (sort &&\n                (_.modified('sort') || pulse.modified(sort.fields)));\n\n    out.visit(out.REM, list.remove);\n\n    this.modified(mod);\n    this.value = out.source = list.data(stableCompare(sort), mod);\n\n    // propagate tree root if defined\n    if (pulse.source && pulse.source.root) {\n      this.value.root = pulse.source.root;\n    }\n\n    return out;\n  }\n});\n","import {Operator} from 'vega-dataflow';\nimport {compare, inherits} from 'vega-util';\n\n/**\n * Generates a comparator function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<string|function>} params.fields - The fields to compare.\n * @param {Array<string>} [params.orders] - The sort orders.\n *   Each entry should be one of \"ascending\" (default) or \"descending\".\n */\nexport default function Compare(params) {\n  Operator.call(this, null, update, params);\n}\n\ninherits(Compare, Operator);\n\nfunction update(_) {\n  return (this.value && !_.modified())\n    ? this.value\n    : compare(_.fields, _.orders);\n}\n","import {Transform, ingest} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Count regexp-defined pattern occurrences in a text field.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - An accessor for the text field.\n * @param {string} [params.pattern] - RegExp string defining the text pattern.\n * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.\n * @param {string} [params.stopwords] - RegExp string of words to ignore.\n */\nexport default function CountPattern(params) {\n  Transform.call(this, null, params);\n}\n\nCountPattern.Definition = {\n  'type': 'CountPattern',\n  'metadata': {'generates': true, 'changes': true},\n  'params': [\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'case', 'type': 'enum', 'values': ['upper', 'lower', 'mixed'], 'default': 'mixed' },\n    { 'name': 'pattern', 'type': 'string', 'default': '[\\\\w\"]+' },\n    { 'name': 'stopwords', 'type': 'string', 'default': '' },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': ['text', 'count'] }\n  ]\n};\n\nfunction tokenize(text, tcase, match) {\n  switch (tcase) {\n    case 'upper': text = text.toUpperCase(); break;\n    case 'lower': text = text.toLowerCase(); break;\n  }\n  return text.match(match);\n}\n\ninherits(CountPattern, Transform, {\n  transform(_, pulse) {\n    const process = update => tuple => {\n      var tokens = tokenize(get(tuple), _.case, match) || [], t;\n      for (var i=0, n=tokens.length; i<n; ++i) {\n        if (!stop.test(t = tokens[i])) update(t);\n      }\n    };\n\n    const init = this._parameterCheck(_, pulse),\n          counts = this._counts,\n          match = this._match,\n          stop = this._stop,\n          get = _.field,\n          as = _.as || ['text', 'count'],\n          add = process(t => counts[t] = 1 + (counts[t] || 0)),\n          rem = process(t => counts[t] -= 1);\n\n    if (init) {\n      pulse.visit(pulse.SOURCE, add);\n    } else {\n      pulse.visit(pulse.ADD, add);\n      pulse.visit(pulse.REM, rem);\n    }\n\n    return this._finish(pulse, as); // generate output tuples\n  },\n\n  _parameterCheck(_, pulse) {\n    let init = false;\n\n    if (_.modified('stopwords') || !this._stop) {\n      this._stop = new RegExp('^' + (_.stopwords || '') + '$', 'i');\n      init = true;\n    }\n\n    if (_.modified('pattern') || !this._match) {\n      this._match = new RegExp((_.pattern || '[\\\\w\\']+'), 'g');\n      init = true;\n    }\n\n    if (_.modified('field') || pulse.modified(_.field.fields)) {\n      init = true;\n    }\n\n    if (init) this._counts = {};\n    return init;\n  },\n\n  _finish(pulse, as) {\n    const counts = this._counts,\n          tuples = this._tuples || (this._tuples = {}),\n          text = as[0],\n          count = as[1],\n          out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n    let w, t, c;\n\n    for (w in counts) {\n      t = tuples[w];\n      c = counts[w] || 0;\n      if (!t && c) {\n        tuples[w] = (t = ingest({}));\n        t[text] = w;\n        t[count] = c;\n        out.add.push(t);\n      } else if (c === 0) {\n        if (t) out.rem.push(t);\n        counts[w] = null;\n        tuples[w] = null;\n      } else if (t[count] !== c) {\n        t[count] = c;\n        out.mod.push(t);\n      }\n    }\n\n    return out.modifies(as);\n  }\n});\n","import {Transform, ingest} from 'vega-dataflow';\nimport {inherits, truthy} from 'vega-util';\n\n/**\n * Perform a cross-product of a tuple stream with itself.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object):boolean} [params.filter] - An optional filter\n *   function for selectively including tuples in the cross product.\n * @param {Array<string>} [params.as] - The names of the output fields.\n */\nexport default function Cross(params) {\n  Transform.call(this, null, params);\n}\n\nCross.Definition = {\n  'type': 'Cross',\n  'metadata': {'generates': true},\n  'params': [\n    { 'name': 'filter', 'type': 'expr' },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': ['a', 'b'] }\n  ]\n};\n\ninherits(Cross, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE),\n          as = _.as || ['a', 'b'],\n          a = as[0], b = as[1],\n          reset = !this.value\n              || pulse.changed(pulse.ADD_REM)\n              || _.modified('as')\n              || _.modified('filter');\n\n    let data = this.value;\n    if (reset) {\n      if (data) out.rem = data;\n      data = pulse.materialize(pulse.SOURCE).source;\n      out.add = this.value = cross(data, a, b, _.filter || truthy);\n    } else {\n      out.mod = data;\n    }\n\n    out.source = this.value;\n    return out.modifies(as);\n  }\n});\n\nfunction cross(input, a, b, filter) {\n  var data = [],\n      t = {},\n      n = input.length,\n      i = 0,\n      j, left;\n\n  for (; i<n; ++i) {\n    t[a] = left = input[i];\n    for (j=0; j<n; ++j) {\n      t[b] = input[j];\n      if (filter(t)) {\n        data.push(ingest(t));\n        t = {};\n        t[a] = left;\n      }\n    }\n  }\n\n  return data;\n}\n","import {\n  randomKDE,\n  randomLogNormal,\n  randomMixture,\n  randomNormal,\n  randomUniform\n} from 'vega-statistics';\n\nimport {error, hasOwnProperty} from 'vega-util';\n\nconst Distributions = {\n  kde:       randomKDE,\n  mixture:   randomMixture,\n  normal:    randomNormal,\n  lognormal: randomLogNormal,\n  uniform:   randomUniform\n};\n\nconst DISTRIBUTIONS = 'distributions',\n      FUNCTION = 'function',\n      FIELD = 'field';\n\n/**\n * Parse a parameter object for a probability distribution.\n * @param {object} def - The distribution parameter object.\n * @param {function():Array<object>} - A method for requesting\n *   source data. Used for distributions (such as KDE) that\n *   require sample data points. This method will only be\n *   invoked if the 'from' parameter for a target data source\n *   is not provided. Typically this method returns backing\n *   source data for a Pulse object.\n * @return {object} - The output distribution object.\n */\nexport default function parse(def, data) {\n  const func = def[FUNCTION];\n  if (!hasOwnProperty(Distributions, func)) {\n    error('Unknown distribution function: ' + func);\n  }\n\n  const d = Distributions[func]();\n\n  for (const name in def) {\n    // if data field, extract values\n    if (name === FIELD) {\n      d.data((def.from || data()).map(def[name]));\n    }\n\n    // if distribution mixture, recurse to parse each definition\n    else if (name === DISTRIBUTIONS) {\n      d[name](def[name].map(_ => parse(_, data)));\n    }\n\n    // otherwise, simply set the parameter\n    else if (typeof d[name] === FUNCTION) {\n      d[name](def[name]);\n    }\n  }\n\n  return d;\n}\n","import parseDist from './util/Distributions';\nimport {Transform, ingest} from 'vega-dataflow';\nimport {sampleCurve} from 'vega-statistics';\nimport {error, extent, inherits} from 'vega-util';\n\n/**\n * Grid sample points for a probability density. Given a distribution and\n * a sampling extent, will generate points suitable for plotting either\n * PDF (probability density function) or CDF (cumulative distribution\n * function) curves.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {object} params.distribution - The probability distribution. This\n *   is an object parameter dependent on the distribution type.\n * @param {string} [params.method='pdf'] - The distribution method to sample.\n *   One of 'pdf' or 'cdf'.\n * @param {Array<number>} [params.extent] - The [min, max] extent over which\n *   to sample the distribution. This argument is required in most cases, but\n *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method\n *   that returns numerical sample points from which the extent can be deduced.\n * @param {number} [params.minsteps=25] - The minimum number of curve samples\n *   for plotting the density.\n * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n *   for plotting the density.\n * @param {number} [params.steps] - The exact number of curve samples for\n *   plotting the density. If specified, overrides both minsteps and maxsteps\n *   to set an exact number of uniform samples. Useful in conjunction with\n *   a fixed extent to ensure consistent sample points for stacked densities.\n */\nexport default function Density(params) {\n  Transform.call(this, null, params);\n}\n\nconst distributions = [\n  {\n    'key': {'function': 'normal'},\n    'params': [\n      { 'name': 'mean', 'type': 'number', 'default': 0 },\n      { 'name': 'stdev', 'type': 'number', 'default': 1 }\n    ]\n  },\n  {\n    'key': {'function': 'lognormal'},\n    'params': [\n      { 'name': 'mean', 'type': 'number', 'default': 0 },\n      { 'name': 'stdev', 'type': 'number', 'default': 1 }\n    ]\n  },\n  {\n    'key': {'function': 'uniform'},\n    'params': [\n      { 'name': 'min', 'type': 'number', 'default': 0 },\n      { 'name': 'max', 'type': 'number', 'default': 1 }\n    ]\n  },\n  {\n    'key': {'function': 'kde'},\n    'params': [\n      { 'name': 'field', 'type': 'field', 'required': true },\n      { 'name': 'from', 'type': 'data' },\n      { 'name': 'bandwidth', 'type': 'number', 'default': 0 }\n    ]\n  }\n];\n\nconst mixture = {\n  'key': {'function': 'mixture'},\n  'params': [\n    { 'name': 'distributions', 'type': 'param', 'array': true,\n      'params': distributions },\n    { 'name': 'weights', 'type': 'number', 'array': true }\n  ]\n};\n\nDensity.Definition = {\n  'type': 'Density',\n  'metadata': {'generates': true},\n  'params': [\n    { 'name': 'extent', 'type': 'number', 'array': true, 'length': 2 },\n    { 'name': 'steps', 'type': 'number' },\n    { 'name': 'minsteps', 'type': 'number', 'default': 25 },\n    { 'name': 'maxsteps', 'type': 'number', 'default': 200 },\n    { 'name': 'method', 'type': 'string', 'default': 'pdf',\n      'values': ['pdf', 'cdf'] },\n    { 'name': 'distribution', 'type': 'param',\n      'params': distributions.concat(mixture) },\n    { 'name': 'as', 'type': 'string', 'array': true,\n      'default': ['value', 'density'] }\n  ]\n};\n\ninherits(Density, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n    if (!this.value || pulse.changed() || _.modified()) {\n      const dist = parseDist(_.distribution, source(pulse)),\n            minsteps = _.steps || _.minsteps || 25,\n            maxsteps = _.steps || _.maxsteps || 200;\n      let method = _.method || 'pdf';\n\n      if (method !== 'pdf' && method !== 'cdf') {\n        error('Invalid density method: ' + method);\n      }\n      if (!_.extent && !dist.data) {\n        error('Missing density extent parameter.');\n      }\n      method = dist[method];\n\n      const as = _.as || ['value', 'density'],\n            domain = _.extent || extent(dist.data()),\n            values = sampleCurve(method, domain, minsteps, maxsteps)\n              .map(v => {\n                const tuple = {};\n                tuple[as[0]] = v[0];\n                tuple[as[1]] = v[1];\n                return ingest(tuple);\n              });\n\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n    }\n\n    return out;\n  }\n});\n\nfunction source(pulse) {\n  return () => pulse.materialize(pulse.SOURCE).source;\n}\n","import {accessorName} from 'vega-util';\n\n// use either provided alias or accessor field name\nexport function fieldNames(fields, as) {\n  if (!fields) return null;\n  return fields.map((f, i) => as[i] || accessorName(f));\n}\n\nexport function partition(data, groupby, field) {\n  const groups = [],\n        get = f => f(t);\n  let map, i, n, t, k, g;\n\n  // partition data points into groups\n  if (groupby == null) {\n    groups.push(data.map(field));\n  } else {\n    for (map={}, i=0, n=data.length; i<n; ++i) {\n      t = data[i];\n      k = groupby.map(get);\n      g = map[k];\n      if (!g) {\n        map[k] = (g = []);\n        g.dims = k;\n        groups.push(g);\n      }\n      g.push(field(t));\n    }\n  }\n\n  return groups;\n}\n","import {partition} from './util/util';\nimport {Transform, stableCompare} from 'vega-dataflow';\nimport {dotbin} from 'vega-statistics';\nimport {extent, identity, inherits, span} from 'vega-util';\n\nconst Output = 'bin';\n\n/**\n * Dot density binning for dot plot construction.\n * Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n * https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to bin.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n * @param {number} [params.step] - The step size (bin width) within which dots should be\n *   stacked. Defaults to 1/30 of the extent of the data *field*.\n * @param {boolean} [params.smooth=false] - A boolean flag indicating if dot density\n *   stacks should be smoothed to reduce variance.\n */\nexport default function DotBin(params) {\n  Transform.call(this, null, params);\n}\n\nDotBin.Definition = {\n  'type': 'DotBin',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'step', 'type': 'number' },\n    { 'name': 'smooth', 'type': 'boolean', 'default': false },\n    { 'name': 'as', 'type': 'string', 'default': Output }\n  ]\n};\n\nconst autostep = (data, field) => span(extent(data, field)) / 30;\n\ninherits(DotBin, Transform, {\n  transform(_, pulse) {\n    if (this.value && !(_.modified() || pulse.changed())) {\n      return pulse; // early exit\n    }\n\n    const source = pulse.materialize(pulse.SOURCE).source,\n          groups = partition(pulse.source, _.groupby, identity),\n          smooth = _.smooth || false,\n          field = _.field,\n          step = _.step || autostep(source, field),\n          sort = stableCompare((a, b) => field(a) - field(b)),\n          as = _.as || Output,\n          n = groups.length;\n\n    // compute dotplot bins per group\n    let min = Infinity, max = -Infinity, i = 0, j;\n    for (; i<n; ++i) {\n      const g = groups[i].sort(sort);\n      j = -1;\n      for (const v of dotbin(g, step, smooth, field)) {\n        if (v < min) min = v;\n        if (v > max) max = v;\n        g[++j][as] = v;\n      }\n    }\n\n    this.value = {\n      start: min,\n      stop: max,\n      step: step\n    };\n    return pulse.reflow(true).modifies(as);\n  }\n});\n","import {Operator} from 'vega-dataflow';\nimport {accessor, accessorFields, accessorName, inherits} from 'vega-util';\n\n/**\n * Wraps an expression function with access to external parameters.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function} params.expr - The expression function. The\n *  function should accept both a datum and a parameter object.\n *  This operator's value will be a new function that wraps the\n *  expression function with access to this operator's parameters.\n */\nexport default function Expression(params) {\n  Operator.call(this, null, update, params);\n  this.modified(true);\n}\n\ninherits(Expression, Operator);\n\nfunction update(_) {\n  const expr = _.expr;\n  return this.value && !_.modified('expr')\n    ? this.value\n    : accessor(\n        datum => expr(datum, _),\n        accessorFields(expr),\n        accessorName(expr)\n      );\n}\n","import {Transform} from 'vega-dataflow';\nimport {accessorName, inherits, toNumber} from 'vega-util';\n\n/**\n * Computes extents (min/max) for a data field.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The field over which to compute extends.\n */\nexport default function Extent(params) {\n  Transform.call(this, [undefined, undefined], params);\n}\n\nExtent.Definition = {\n  'type': 'Extent',\n  'metadata': {},\n  'params': [\n    { 'name': 'field', 'type': 'field', 'required': true }\n  ]\n};\n\ninherits(Extent, Transform, {\n  transform(_, pulse) {\n    const extent = this.value,\n          field = _.field,\n          mod = pulse.changed()\n            || pulse.modified(field.fields)\n            || _.modified('field');\n\n    let min = extent[0],\n        max = extent[1];\n    if (mod || min == null) {\n      min = +Infinity;\n      max = -Infinity;\n    }\n\n    pulse.visit(mod ? pulse.SOURCE : pulse.ADD, t => {\n      const v = toNumber(field(t));\n      if (v != null) {\n        // NaNs will fail all comparisons!\n        if (v < min) min = v;\n        if (v > max) max = v;\n      }\n    });\n\n    if (!Number.isFinite(min) || !Number.isFinite(max)) {\n      let name = accessorName(field);\n      if (name) name = ` for field \"${name}\"`;\n      pulse.dataflow.warn(`Infinite extent${name}: [${min}, ${max}]`);\n      min = max = undefined;\n    }\n    this.value = [min, max];\n  }\n});\n","import {Operator} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Provides a bridge between a parent transform and a target subflow that\n * consumes only a subset of the tuples that pass through the parent.\n * @constructor\n * @param {Pulse} pulse - A pulse to use as the value of this operator.\n * @param {Transform} parent - The parent transform (typically a Facet instance).\n */\nexport default function Subflow(pulse, parent) {\n  Operator.call(this, pulse);\n  this.parent = parent;\n  this.count = 0;\n}\n\ninherits(Subflow, Operator, {\n  /**\n   * Routes pulses from this subflow to a target transform.\n   * @param {Transform} target - A transform that receives the subflow of tuples.\n   */\n  connect(target) {\n    this.detachSubflow = target.detachSubflow;\n    this.targets().add(target);\n    return (target.source = this);\n  },\n\n  /**\n   * Add an 'add' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being added.\n   */\n  add(t) {\n    this.count += 1;\n    this.value.add.push(t);\n  },\n\n  /**\n   * Add a 'rem' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being removed.\n   */\n  rem(t) {\n    this.count -= 1;\n    this.value.rem.push(t);\n  },\n\n  /**\n   * Add a 'mod' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being modified.\n   */\n  mod(t) {\n    this.value.mod.push(t);\n  },\n\n  /**\n   * Re-initialize this operator's pulse value.\n   * @param {Pulse} pulse - The pulse to copy from.\n   * @see Pulse.init\n   */\n  init(pulse) {\n    this.value.init(pulse, pulse.NO_SOURCE);\n  },\n\n  /**\n   * Evaluate this operator. This method overrides the\n   * default behavior to simply return the contained pulse value.\n   * @return {Pulse}\n   */\n  evaluate() {\n    // assert: this.value.stamp === pulse.stamp\n    return this.value;\n  }\n});\n","import Subflow from './Subflow';\nimport {Transform, tupleid} from 'vega-dataflow';\nimport {fastmap, hasOwnProperty, inherits} from 'vega-util';\n\n/**\n * Facets a dataflow into a set of subflows based on a key.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(Dataflow, string): Operator} params.subflow - A function\n *   that generates a subflow of operators and returns its root operator.\n * @param {function(object): *} params.key - The key field to facet by.\n */\nexport default function Facet(params) {\n  Transform.call(this, {}, params);\n  this._keys = fastmap(); // cache previously calculated key values\n\n  // keep track of active subflows, use as targets array for listeners\n  // this allows us to limit propagation to only updated subflows\n  const a = this._targets = [];\n  a.active = 0;\n  a.forEach = f => {\n    for (let i=0, n=a.active; i<n; ++i) {\n      f(a[i], i, a);\n    }\n  };\n}\n\ninherits(Facet, Transform, {\n  activate(flow) {\n    this._targets[this._targets.active++] = flow;\n  },\n\n  // parent argument provided by PreFacet subclass\n  subflow(key, flow, pulse, parent) {\n    const flows = this.value;\n    let sf = hasOwnProperty(flows, key) && flows[key],\n        df, p;\n\n    if (!sf) {\n      p = parent || (p = this._group[key]) && p.tuple;\n      df = pulse.dataflow;\n      sf = new Subflow(pulse.fork(pulse.NO_SOURCE), this);\n      df.add(sf).connect(flow(df, key, p));\n      flows[key] = sf;\n      this.activate(sf);\n    } else if (sf.value.stamp < pulse.stamp) {\n      sf.init(pulse);\n      this.activate(sf);\n    }\n\n    return sf;\n  },\n\n  clean() {\n    const flows = this.value;\n    let detached = 0;\n    for (const key in flows) {\n      if (flows[key].count === 0) {\n        const detach = flows[key].detachSubflow;\n        if (detach) detach();\n        delete flows[key];\n        ++detached;\n      }\n    }\n\n    // remove inactive targets from the active targets array\n    if (detached) {\n      const active = this._targets.filter(sf => sf && sf.count > 0);\n      this.initTargets(active);\n    }\n  },\n\n  initTargets(act) {\n    const a = this._targets,\n          n = a.length,\n          m = act ? act.length : 0;\n    let i = 0;\n\n    for (; i<m; ++i) {\n      a[i] = act[i];\n    }\n    for (; i<n && a[i] != null; ++i) {\n      a[i] = null; // ensure old flows can be garbage collected\n    }\n    a.active = m;\n  },\n\n  transform(_, pulse) {\n    const df = pulse.dataflow,\n          key = _.key,\n          flow = _.subflow,\n          cache = this._keys,\n          rekey = _.modified('key'),\n          subflow = key => this.subflow(key, flow, pulse);\n\n    this._group = _.group || {};\n    this.initTargets(); // reset list of active subflows\n\n    pulse.visit(pulse.REM, t => {\n      const id = tupleid(t),\n            k = cache.get(id);\n      if (k !== undefined) {\n        cache.delete(id);\n        subflow(k).rem(t);\n      }\n    });\n\n    pulse.visit(pulse.ADD, t => {\n      const k = key(t);\n      cache.set(tupleid(t), k);\n      subflow(k).add(t);\n    });\n\n    if (rekey || pulse.modified(key.fields)) {\n      pulse.visit(pulse.MOD, t => {\n        const id = tupleid(t),\n              k0 = cache.get(id),\n              k1 = key(t);\n        if (k0 === k1) {\n          subflow(k1).mod(t);\n        } else {\n          cache.set(id, k1);\n          subflow(k0).rem(t);\n          subflow(k1).add(t);\n        }\n      });\n    } else if (pulse.changed(pulse.MOD)) {\n      pulse.visit(pulse.MOD, t => {\n        subflow(cache.get(tupleid(t))).mod(t);\n      });\n    }\n\n    if (rekey) {\n      pulse.visit(pulse.REFLOW, t => {\n        const id = tupleid(t),\n              k0 = cache.get(id),\n              k1 = key(t);\n        if (k0 !== k1) {\n          cache.set(id, k1);\n          subflow(k0).rem(t);\n          subflow(k1).add(t);\n        }\n      });\n    }\n\n    if (pulse.clean()) {\n      df.runAfter(() => { this.clean(); cache.clean(); });\n    } else if (cache.empty > df.cleanThreshold) {\n      df.runAfter(cache.clean);\n    }\n\n    return pulse;\n  }\n});\n","import {Operator} from 'vega-dataflow';\nimport {array, field, inherits, isArray} from 'vega-util';\n\n/**\n * Generates one or more field accessor functions.\n * If the 'name' parameter is an array, an array of field accessors\n * will be created and the 'as' parameter will be ignored.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {string} params.name - The field name(s) to access.\n * @param {string} params.as - The accessor function name.\n */\nexport default function Field(params) {\n  Operator.call(this, null, update, params);\n}\n\ninherits(Field, Operator);\n\nfunction update(_) {\n  return (this.value && !_.modified()) ? this.value\n    : isArray(_.name) ? array(_.name).map(f => field(f))\n    : field(_.name, _.as);\n}\n","import {Transform, tupleid} from 'vega-dataflow';\nimport {fastmap, inherits} from 'vega-util';\n\n/**\n * Filters data tuples according to a predicate function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.expr - The predicate expression function\n *   that determines a tuple's filter status. Truthy values pass the filter.\n */\nexport default function Filter(params) {\n  Transform.call(this, fastmap(), params);\n}\n\nFilter.Definition = {\n  'type': 'Filter',\n  'metadata': {'changes': true},\n  'params': [\n    { 'name': 'expr', 'type': 'expr', 'required': true }\n  ]\n};\n\ninherits(Filter, Transform, {\n  transform(_, pulse) {\n    const df = pulse.dataflow,\n          cache = this.value, // cache ids of filtered tuples\n          output = pulse.fork(),\n          add = output.add,\n          rem = output.rem,\n          mod = output.mod,\n          test = _.expr;\n    let isMod = true;\n\n    pulse.visit(pulse.REM, t => {\n      const id = tupleid(t);\n      if (!cache.has(id)) rem.push(t);\n      else cache.delete(id);\n    });\n\n    pulse.visit(pulse.ADD, t => {\n      if (test(t, _)) add.push(t);\n      else cache.set(tupleid(t), 1);\n    });\n\n    function revisit(t) {\n      const id = tupleid(t),\n            b = test(t, _),\n            s = cache.get(id);\n      if (b && s) {\n        cache.delete(id);\n        add.push(t);\n      } else if (!b && !s) {\n        cache.set(id, 1);\n        rem.push(t);\n      } else if (isMod && b && !s) {\n        mod.push(t);\n      }\n    }\n\n    pulse.visit(pulse.MOD, revisit);\n\n    if (_.modified()) {\n      isMod = false;\n      pulse.visit(pulse.REFLOW, revisit);\n    }\n\n    if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);\n    return output;\n  }\n});\n","import {fieldNames} from './util/util';\nimport {Transform, derive} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Flattens array-typed field values into new data objects.\n * If multiple fields are specified, they are treated as parallel arrays,\n * with output values included for each matching index (or null if missing).\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} params.fields - An array of field\n *   accessors for the tuple fields that should be flattened.\n * @param {string} [params.index] - Optional output field name for index\n *   value. If unspecified, no index field is included in the output.\n * @param {Array<string>} [params.as] - Output field names for flattened\n *   array fields. Any unspecified fields will use the field name provided\n *   by the fields accessors.\n */\nexport default function Flatten(params) {\n  Transform.call(this, [], params);\n}\n\nFlatten.Definition = {\n  'type': 'Flatten',\n  'metadata': {'generates': true},\n  'params': [\n    { 'name': 'fields', 'type': 'field', 'array': true, 'required': true },\n    { 'name': 'index', 'type': 'string' },\n    { 'name': 'as', 'type': 'string', 'array': true }\n  ]\n};\n\ninherits(Flatten, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE),\n          fields = _.fields,\n          as = fieldNames(fields, _.as || []),\n          index = _.index || null,\n          m = as.length;\n\n    // remove any previous results\n    out.rem = this.value;\n\n    // generate flattened tuples\n    pulse.visit(pulse.SOURCE, t => {\n      const arrays = fields.map(f => f(t)),\n            maxlen = arrays.reduce((l, a) => Math.max(l, a.length), 0);\n      let i = 0, j, d, v;\n\n      for (; i<maxlen; ++i) {\n        d = derive(t);\n        for (j=0; j<m; ++j) {\n          d[as[j]] = (v = arrays[j][i]) == null ? null : v;\n        }\n        if (index) {\n          d[index] = i;\n        }\n        out.add.push(d);\n      }\n    });\n\n    this.value = out.source = out.add;\n    if (index) out.modifies(index);\n    return out.modifies(as);\n  }\n});\n","import {Transform, derive} from 'vega-dataflow';\nimport {accessorName, inherits} from 'vega-util';\n\n/**\n * Folds one more tuple fields into multiple tuples in which the field\n * name and values are available under new 'key' and 'value' fields.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.fields - An array of field accessors\n *   for the tuple fields that should be folded.\n * @param {Array<string>} [params.as] - Output field names for folded key\n *   and value fields, defaults to ['key', 'value'].\n */\nexport default function Fold(params) {\n  Transform.call(this, [], params);\n}\n\nFold.Definition = {\n  'type': 'Fold',\n  'metadata': {'generates': true},\n  'params': [\n    { 'name': 'fields', 'type': 'field', 'array': true, 'required': true },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': ['key', 'value'] }\n  ]\n};\n\ninherits(Fold, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE),\n          fields = _.fields,\n          fnames = fields.map(accessorName),\n          as = _.as || ['key', 'value'],\n          k = as[0],\n          v = as[1],\n          n = fields.length;\n\n    out.rem = this.value;\n\n    pulse.visit(pulse.SOURCE, t => {\n      for (let i=0, d; i<n; ++i) {\n        d = derive(t);\n        d[k] = fnames[i];\n        d[v] = fields[i](t);\n        out.add.push(d);\n      }\n    });\n\n    this.value = out.source = out.add;\n    return out.modifies(as);\n  }\n});\n","import {Transform} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Invokes a function for each data tuple and saves the results as a new field.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.expr - The formula function to invoke for each tuple.\n * @param {string} params.as - The field name under which to save the result.\n * @param {boolean} [params.initonly=false] - If true, the formula is applied to\n *   added tuples only, and does not update in response to modifications.\n */\nexport default function Formula(params) {\n  Transform.call(this, null, params);\n}\n\nFormula.Definition = {\n  'type': 'Formula',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'expr', 'type': 'expr', 'required': true },\n    { 'name': 'as', 'type': 'string', 'required': true },\n    { 'name': 'initonly', 'type': 'boolean' }\n  ]\n};\n\ninherits(Formula, Transform, {\n  transform (_, pulse) {\n    const func = _.expr,\n          as = _.as,\n          mod = _.modified(),\n          flag = _.initonly ? pulse.ADD\n            : mod ? pulse.SOURCE\n            : pulse.modified(func.fields) || pulse.modified(as) ? pulse.ADD_MOD\n            : pulse.ADD;\n\n    if (mod) {\n      // parameters updated, need to reflow\n      pulse = pulse.materialize().reflow(true);\n    }\n\n    if (!_.initonly) {\n      pulse.modifies(as);\n    }\n\n    return pulse.visit(flag, t => t[as] = func(t, _));\n  }\n});\n","import {Transform, ingest} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Generates data tuples using a provided generator function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(Parameters): object} params.generator - A tuple generator\n *   function. This function is given the operator parameters as input.\n *   Changes to any additional parameters will not trigger re-calculation\n *   of previously generated tuples. Only future tuples are affected.\n * @param {number} params.size - The number of tuples to produce.\n */\nexport default function Generate(params) {\n  Transform.call(this, [], params);\n}\n\ninherits(Generate, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.ALL),\n          gen = _.generator;\n\n    let data = this.value,\n        num = _.size - data.length,\n        add, rem, t;\n\n    if (num > 0) {\n      // need more tuples, generate and add\n      for (add=[]; --num >= 0;) {\n        add.push(t = ingest(gen(_)));\n        data.push(t);\n      }\n      out.add = out.add.length\n        ? out.materialize(out.ADD).add.concat(add)\n        : add;\n    } else {\n      // need fewer tuples, remove\n      rem = data.slice(0, -num);\n      out.rem = out.rem.length\n        ? out.materialize(out.REM).rem.concat(rem)\n        : rem;\n      data = data.slice(-num);\n    }\n\n    out.source = this.value = data;\n    return out;\n  }\n});\n","export default function ascending(a, b) {\n  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","import ascending from \"./ascending.js\";\nimport permute from \"./permute.js\";\n\nexport default function sort(values, ...F) {\n  if (typeof values[Symbol.iterator] !== \"function\") throw new TypeError(\"values is not iterable\");\n  values = Array.from(values);\n  let [f] = F;\n  if ((f && f.length !== 2) || F.length > 1) {\n    const index = Uint32Array.from(values, (d, i) => i);\n    if (F.length > 1) {\n      F = F.map(f => values.map(f));\n      index.sort((i, j) => {\n        for (const f of F) {\n          const c = ascendingDefined(f[i], f[j]);\n          if (c) return c;\n        }\n      });\n    } else {\n      f = values.map(f);\n      index.sort((i, j) => ascendingDefined(f[i], f[j]));\n    }\n    return permute(values, index);\n  }\n  return values.sort(compareDefined(f));\n}\n\nexport function compareDefined(compare = ascending) {\n  if (compare === ascending) return ascendingDefined;\n  if (typeof compare !== \"function\") throw new TypeError(\"compare is not a function\");\n  return (a, b) => {\n    const x = compare(a, b);\n    if (x || x === 0) return x;\n    return (compare(b, b) === 0) - (compare(a, a) === 0);\n  };\n}\n\nexport function ascendingDefined(a, b) {\n  return (a == null || !(a >= a)) - (b == null || !(b >= b)) || (a < b ? -1 : a > b ? 1 : 0);\n}\n","export default function max(values, valueof) {\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  }\n  return max;\n}\n","export default function min(values, valueof) {\n  let min;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  }\n  return min;\n}\n","import {ascendingDefined, compareDefined} from \"./sort.js\";\n\n// Based on https://github.com/mourner/quickselect\n// ISC license, Copyright 2018 Vladimir Agafonkin.\nexport default function quickselect(array, k, left = 0, right = array.length - 1, compare) {\n  compare = compare === undefined ? ascendingDefined : compareDefined(compare);\n\n  while (right > left) {\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(array, k, newLeft, newRight, compare);\n    }\n\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    swap(array, left, k);\n    if (compare(array[right], t) > 0) swap(array, left, right);\n\n    while (i < j) {\n      swap(array, i, j), ++i, --j;\n      while (compare(array[i], t) < 0) ++i;\n      while (compare(array[j], t) > 0) --j;\n    }\n\n    if (compare(array[left], t) === 0) swap(array, left, j);\n    else ++j, swap(array, j, right);\n\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n  return array;\n}\n\nfunction swap(array, i, j) {\n  const t = array[i];\n  array[i] = array[j];\n  array[j] = t;\n}\n","import max from \"./max.js\";\nimport min from \"./min.js\";\nimport quickselect from \"./quickselect.js\";\nimport number, {numbers} from \"./number.js\";\n\nexport default function quantile(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return min(values);\n  if (p >= 1) return max(values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\n      value1 = min(values.subarray(i0 + 1));\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nexport function quantileSorted(values, p, valueof = number) {\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\n","export default function number(x) {\n  return x === null ? NaN : +x;\n}\n\nexport function* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n","export default function range(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n","import {Transform, ingest} from 'vega-dataflow';\nimport {accessorName, error, inherits} from 'vega-util';\nimport {max, mean, median, min} from 'd3-array';\n\nconst Methods = {\n  value: 'value',\n  median: median,\n  mean: mean,\n  min: min,\n  max: max\n};\n\nconst Empty = [];\n\n/**\n * Impute missing values.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to impute.\n * @param {Array<function(object): *>} [params.groupby] - An array of\n *   accessors to determine series within which to perform imputation.\n * @param {function(object): *} params.key - An accessor for a key value.\n *   Each key value should be unique within a group. New tuples will be\n *   imputed for any key values that are not found within a group.\n * @param {Array<*>} [params.keyvals] - Optional array of required key\n *   values. New tuples will be imputed for any key values that are not\n *   found within a group. In addition, these values will be automatically\n *   augmented with the key values observed in the input data.\n * @param {string} [method='value'] - The imputation method to use. One of\n *   'value', 'mean', 'median', 'max', 'min'.\n * @param {*} [value=0] - The constant value to use for imputation\n *   when using method 'value'.\n */\nexport default function Impute(params) {\n  Transform.call(this, [], params);\n}\n\nImpute.Definition = {\n  'type': 'Impute',\n  'metadata': {'changes': true},\n  'params': [\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'key', 'type': 'field', 'required': true },\n    { 'name': 'keyvals', 'array': true },\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'method', 'type': 'enum', 'default': 'value',\n      'values': ['value', 'mean', 'median', 'max', 'min'] },\n    { 'name': 'value', 'default': 0 }\n  ]\n};\n\nfunction getValue(_) {\n  var m = _.method || Methods.value, v;\n\n  if (Methods[m] == null) {\n    error('Unrecognized imputation method: ' + m);\n  } else if (m === Methods.value) {\n    v = _.value !== undefined ? _.value : 0;\n    return () => v;\n  } else {\n    return Methods[m];\n  }\n}\n\nfunction getField(_) {\n  const f = _.field;\n  return t => t ? f(t) : NaN;\n}\n\ninherits(Impute, Transform, {\n  transform(_, pulse) {\n    var out = pulse.fork(pulse.ALL),\n        impute = getValue(_),\n        field = getField(_),\n        fName = accessorName(_.field),\n        kName = accessorName(_.key),\n        gNames = (_.groupby || []).map(accessorName),\n        groups = partition(pulse.source, _.groupby, _.key, _.keyvals),\n        curr = [],\n        prev = this.value,\n        m = groups.domain.length,\n        group, value, gVals, kVal, g, i, j, l, n, t;\n\n    for (g=0, l=groups.length; g<l; ++g) {\n      group = groups[g];\n      gVals = group.values;\n      value = NaN;\n\n      // add tuples for missing values\n      for (j=0; j<m; ++j) {\n        if (group[j] != null) continue;\n        kVal = groups.domain[j];\n\n        t = {_impute: true};\n        for (i=0, n=gVals.length; i<n; ++i) t[gNames[i]] = gVals[i];\n        t[kName] = kVal;\n        t[fName] = Number.isNaN(value) ? (value = impute(group, field)) : value;\n\n        curr.push(ingest(t));\n      }\n    }\n\n    // update pulse with imputed tuples\n    if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);\n    if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);\n    this.value = curr;\n\n    return out;\n  }\n});\n\nfunction partition(data, groupby, key, keyvals) {\n  var get = f => f(t),\n      groups = [],\n      domain = keyvals ? keyvals.slice() : [],\n      kMap = {},\n      gMap = {}, gVals, gKey,\n      group, i, j, k, n, t;\n\n  domain.forEach((k, i) => kMap[k] = i + 1);\n\n  for (i=0, n=data.length; i<n; ++i) {\n    t = data[i];\n    k = key(t);\n    j = kMap[k] || (kMap[k] = domain.push(k));\n\n    gKey = (gVals = groupby ? groupby.map(get) : Empty) + '';\n    if (!(group = gMap[gKey])) {\n      group = (gMap[gKey] = []);\n      groups.push(group);\n      group.values = gVals;\n    }\n    group[j-1] = t;\n  }\n\n  groups.domain = domain;\n  return groups;\n}\n","import quantile from \"./quantile.js\";\n\nexport default function median(values, valueof) {\n  return quantile(values, 0.5, valueof);\n}\n","export default function mean(values, valueof) {\n  let count = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        ++count, sum += value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        ++count, sum += value;\n      }\n    }\n  }\n  if (count) return sum / count;\n}\n","import Aggregate from './Aggregate';\nimport {ValidAggregateOps} from './util/AggregateOps';\nimport {extend, inherits} from 'vega-util';\n\n/**\n * Extend input tuples with aggregate values.\n * Calcuates aggregate values and joins them with the input stream.\n * @constructor\n */\nexport default function JoinAggregate(params) {\n  Aggregate.call(this, params);\n}\n\nJoinAggregate.Definition = {\n  'type': 'JoinAggregate',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'fields', 'type': 'field', 'null': true, 'array': true },\n    { 'name': 'ops', 'type': 'enum', 'array': true, 'values': ValidAggregateOps },\n    { 'name': 'as', 'type': 'string', 'null': true, 'array': true },\n    { 'name': 'key', 'type': 'field' }\n  ]\n};\n\ninherits(JoinAggregate, Aggregate, {\n  transform(_, pulse) {\n    const aggr = this,\n          mod = _.modified();\n    let cells;\n\n    // process all input tuples to calculate aggregates\n    if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n      cells = aggr.value = mod ? aggr.init(_) : {};\n      pulse.visit(pulse.SOURCE, t => aggr.add(t));\n    } else {\n      cells = aggr.value = aggr.value || this.init(_);\n      pulse.visit(pulse.REM, t => aggr.rem(t));\n      pulse.visit(pulse.ADD, t => aggr.add(t));\n    }\n\n    // update aggregation cells\n    aggr.changes();\n\n    // write aggregate values to input tuples\n    pulse.visit(pulse.SOURCE, t => {\n      extend(t, cells[aggr.cellkey(t)].tuple);\n    });\n\n    return pulse.reflow(mod).modifies(this._outputs);\n  },\n\n  changes() {\n    const adds = this._adds,\n          mods = this._mods;\n    let i, n;\n\n    for (i=0, n=this._alen; i<n; ++i) {\n      this.celltuple(adds[i]);\n      adds[i] = null; // for garbage collection\n    }\n\n    for (i=0, n=this._mlen; i<n; ++i) {\n      this.celltuple(mods[i]);\n      mods[i] = null; // for garbage collection\n    }\n\n    this._alen = this._mlen = 0; // reset list of active cells\n  }\n});\n","import {partition} from './util/util';\nimport {randomKDE} from 'vega-statistics';\nimport {Transform, ingest} from 'vega-dataflow';\nimport {sampleCurve} from 'vega-statistics';\nimport {accessorName, error, extent, inherits} from 'vega-util';\n\n/**\n * Compute kernel density estimates (KDE) for one or more data groups.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n *   to groupby.\n * @param {function(object): *} params.field - An accessor for the data field\n *   to estimate.\n * @param {number} [params.bandwidth=0] - The KDE kernel bandwidth.\n *   If zero or unspecified, the bandwidth is automatically determined.\n * @param {boolean} [params.counts=false] - A boolean flag indicating if the\n *   output values should be probability estimates (false, default) or\n *   smoothed counts (true).\n * @param {string} [params.cumulative=false] - A boolean flag indicating if a\n *   density (false) or cumulative distribution (true) should be generated.\n * @param {Array<number>} [params.extent] - The domain extent over which to\n *   plot the density. If unspecified, the [min, max] data extent is used.\n * @param {string} [params.resolve='independent'] - Indicates how parameters for\n *   multiple densities should be resolved. If \"independent\" (the default), each\n *   density may have its own domain extent and dynamic number of curve sample\n *   steps. If \"shared\", the KDE transform will ensure that all densities are\n *   defined over a shared domain and curve steps, enabling stacking.\n * @param {number} [params.minsteps=25] - The minimum number of curve samples\n *   for plotting the density.\n * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n *   for plotting the density.\n * @param {number} [params.steps] - The exact number of curve samples for\n *   plotting the density. If specified, overrides both minsteps and maxsteps\n *   to set an exact number of uniform samples. Useful in conjunction with\n *   a fixed extent to ensure consistent sample points for stacked densities.\n */\nexport default function KDE(params) {\n  Transform.call(this, null, params);\n}\n\nKDE.Definition = {\n  'type': 'KDE',\n  'metadata': {'generates': true},\n  'params': [\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'cumulative', 'type': 'boolean', 'default': false },\n    { 'name': 'counts', 'type': 'boolean', 'default': false },\n    { 'name': 'bandwidth', 'type': 'number', 'default': 0 },\n    { 'name': 'extent', 'type': 'number', 'array': true, 'length': 2 },\n    { 'name': 'resolve', 'type': 'enum', 'values': ['shared', 'independent'], 'default': 'independent' },\n    { 'name': 'steps', 'type': 'number' },\n    { 'name': 'minsteps', 'type': 'number', 'default': 25 },\n    { 'name': 'maxsteps', 'type': 'number', 'default': 200 },\n    { 'name': 'as', 'type': 'string', 'array': true, 'default': ['value', 'density'] }\n  ]\n};\n\ninherits(KDE, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n    if (!this.value || pulse.changed() || _.modified()) {\n      const source = pulse.materialize(pulse.SOURCE).source,\n            groups = partition(source, _.groupby, _.field),\n            names = (_.groupby || []).map(accessorName),\n            bandwidth = _.bandwidth,\n            method = _.cumulative ? 'cdf' : 'pdf',\n            as = _.as || ['value', 'density'],\n            values = [];\n\n      let domain = _.extent,\n          minsteps = _.steps || _.minsteps || 25,\n          maxsteps = _.steps || _.maxsteps || 200;\n\n      if (method !== 'pdf' && method !== 'cdf') {\n        error('Invalid density method: ' + method);\n      }\n\n      if (_.resolve === 'shared') {\n        if (!domain) domain = extent(source, _.field);\n        minsteps = maxsteps = _.steps || maxsteps;\n      }\n\n      groups.forEach(g => {\n        const density = randomKDE(g, bandwidth)[method],\n              scale = _.counts ? g.length : 1,\n              local = domain || extent(g);\n\n        sampleCurve(density, local, minsteps, maxsteps)\n          .forEach(v => {\n            const t = {};\n            for (let i=0; i<names.length; ++i) {\n              t[names[i]] = g.dims[i];\n            }\n            t[as[0]] = v[0];\n            t[as[1]] = v[1] * scale;\n            values.push(ingest(t));\n          });\n      });\n\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n    }\n\n    return out;\n  }\n});\n","import {Operator} from 'vega-dataflow';\nimport {inherits, key} from 'vega-util';\n\n/**\n * Generates a key function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<string>} params.fields - The field name(s) for the key function.\n * @param {boolean} params.flat - A boolean flag indicating if the field names\n *  should be treated as flat property names, side-stepping nested field\n *  lookups normally indicated by dot or bracket notation.\n */\nexport default function Key(params) {\n  Operator.call(this, null, update, params);\n}\n\ninherits(Key, Operator);\n\nfunction update(_) {\n  return (this.value && !_.modified()) ? this.value : key(_.fields, _.flat);\n}\n","import {Transform, ingest} from 'vega-dataflow';\nimport {array, inherits} from 'vega-util';\n\n/**\n * Load and parse data from an external source. Marshalls parameter\n * values and then invokes the Dataflow request method.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {string} params.url - The URL to load from.\n * @param {object} params.format - The data format options.\n */\nexport default function Load(params) {\n  Transform.call(this, [], params);\n  this._pending = null;\n}\n\ninherits(Load, Transform, {\n  transform(_, pulse) {\n    const df = pulse.dataflow;\n\n    if (this._pending) {\n      // update state and return pulse\n      return output(this, pulse, this._pending);\n    }\n\n    if (stop(_)) return pulse.StopPropagation;\n\n    if (_.values) {\n      // parse and ingest values, return output pulse\n      return output(this, pulse, df.parse(_.values, _.format));\n    } else if (_.async) {\n      // return promise for non-blocking async loading\n      const p = df.request(_.url, _.format).then(res => {\n        this._pending = array(res.data);\n        return df => df.touch(this);\n      });\n      return {async: p};\n    } else {\n      // return promise for synchronous loading\n      return df.request(_.url, _.format)\n        .then(res => output(this, pulse, array(res.data)));\n    }\n  }\n});\n\nfunction stop(_) {\n  return _.modified('async') && !(\n    _.modified('values') || _.modified('url') || _.modified('format')\n  );\n}\n\nfunction output(op, pulse, data) {\n  data.forEach(ingest);\n  const out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);\n  out.rem = op.value;\n  op.value = out.source = out.add = data;\n  op._pending = null;\n  if (out.rem.length) out.clean(true);\n  return out;\n}\n","import {Transform} from 'vega-dataflow';\nimport {accessorName, error, inherits} from 'vega-util';\n\n/**\n * Extend tuples by joining them with values from a lookup table.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Map} params.index - The lookup table map.\n * @param {Array<function(object): *} params.fields - The fields to lookup.\n * @param {Array<string>} params.as - Output field names for each lookup value.\n * @param {*} [params.default] - A default value to use if lookup fails.\n */\nexport default function Lookup(params) {\n  Transform.call(this, {}, params);\n}\n\nLookup.Definition = {\n  'type': 'Lookup',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'index', 'type': 'index', 'params': [\n        {'name': 'from', 'type': 'data', 'required': true },\n        {'name': 'key', 'type': 'field', 'required': true }\n      ] },\n    { 'name': 'values', 'type': 'field', 'array': true },\n    { 'name': 'fields', 'type': 'field', 'array': true, 'required': true },\n    { 'name': 'as', 'type': 'string', 'array': true },\n    { 'name': 'default', 'default': null }\n  ]\n};\n\ninherits(Lookup, Transform, {\n  transform(_, pulse) {\n    const keys = _.fields,\n          index = _.index,\n          values = _.values,\n          defaultValue = _.default==null ? null : _.default,\n          reset = _.modified(),\n          n = keys.length;\n\n    let flag = reset ? pulse.SOURCE : pulse.ADD,\n        out = pulse,\n        as = _.as,\n        set, m, mods;\n\n    if (values) {\n      m = values.length;\n\n      if (n > 1 && !as) {\n        error('Multi-field lookup requires explicit \"as\" parameter.');\n      }\n      if (as && as.length !== n * m) {\n        error('The \"as\" parameter has too few output field names.');\n      }\n      as = as || values.map(accessorName);\n\n      set = function(t) {\n        for (var i=0, k=0, j, v; i<n; ++i) {\n          v = index.get(keys[i](t));\n          if (v == null) for (j=0; j<m; ++j, ++k) t[as[k]] = defaultValue;\n          else for (j=0; j<m; ++j, ++k) t[as[k]] = values[j](v);\n        }\n      };\n    } else {\n      if (!as) {\n        error('Missing output field names.');\n      }\n\n      set = function(t) {\n        for (var i=0, v; i<n; ++i) {\n          v = index.get(keys[i](t));\n          t[as[i]] = v==null ? defaultValue : v;\n        }\n      };\n    }\n\n    if (reset) {\n      out = pulse.reflow(true);\n    } else {\n      mods = keys.some(k =>pulse.modified(k.fields));\n      flag |= (mods ? pulse.MOD : 0);\n    }\n    pulse.visit(flag, set);\n\n    return out.modifies(as);\n  }\n});\n","import {Operator} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Computes global min/max extents over a collection of extents.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<Array<number>>} params.extents - The input extents.\n */\nexport default function MultiExtent(params) {\n  Operator.call(this, null, update, params);\n}\n\ninherits(MultiExtent, Operator);\n\nfunction update(_) {\n  if (this.value && !_.modified()) {\n    return this.value;\n  }\n\n  const ext = _.extents,\n        n = ext.length;\n\n  let min = +Infinity,\n      max = -Infinity,\n      i, e;\n\n  for (i = 0; i < n; ++i) {\n    e = ext[i];\n    if (e[0] < min) min = e[0];\n    if (e[1] > max) max = e[1];\n  }\n  return [min, max];\n}\n","import {Operator} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Merge a collection of value arrays.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<Array<*>>} params.values - The input value arrrays.\n */\nexport default function MultiValues(params) {\n  Operator.call(this, null, update, params);\n}\n\ninherits(MultiValues, Operator);\n\nfunction update(_) {\n  return (this.value && !_.modified())\n    ? this.value\n    : _.values.reduce((data, _) => data.concat(_), []);\n}\n","import {Transform} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Operator whose value is simply its parameter hash. This operator is\n * useful for enabling reactive updates to values of nested objects.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\nexport default function Params(params) {\n  Transform.call(this, null, params);\n}\n\ninherits(Params, Transform, {\n  transform(_, pulse) {\n    this.modified(_.modified());\n    this.value = _;\n    return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples\n  }\n});\n","import Aggregate from './Aggregate';\nimport {ValidAggregateOps} from './util/AggregateOps';\nimport {accessor, accessorFields, ascending, inherits} from 'vega-util';\n\n/**\n * Aggregate and pivot selected field values to become new fields.\n * This operator is useful to construction cross-tabulations.\n * @constructor\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n *  to groupby. These fields act just like groupby fields of an Aggregate transform.\n * @param {function(object): *} params.field - The field to pivot on. The unique\n *  values of this field become new field names in the output stream.\n * @param {function(object): *} params.value - The field to populate pivoted fields.\n *  The aggregate values of this field become the values of the new pivoted fields.\n * @param {string} [params.op] - The aggregation operation for the value field,\n *  applied per cell in the output stream. The default is \"sum\".\n * @param {number} [params.limit] - An optional parameter indicating the maximum\n *  number of pivoted fields to generate. The pivoted field names are sorted in\n *  ascending order prior to enforcing the limit.\n */\nexport default function Pivot(params) {\n  Aggregate.call(this, params);\n}\n\nPivot.Definition = {\n  'type': 'Pivot',\n  'metadata': {'generates': true, 'changes': true},\n  'params': [\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'value', 'type': 'field', 'required': true },\n    { 'name': 'op', 'type': 'enum', 'values': ValidAggregateOps, 'default': 'sum' },\n    { 'name': 'limit', 'type': 'number', 'default': 0 },\n    { 'name': 'key', 'type': 'field' }\n  ]\n};\n\ninherits(Pivot, Aggregate, {\n  _transform: Aggregate.prototype.transform,\n  transform(_, pulse) {\n    return this._transform(aggregateParams(_, pulse), pulse);\n  }\n});\n\n// Shoehorn a pivot transform into an aggregate transform!\n// First collect all unique pivot field values.\n// Then generate aggregate fields for each output pivot field.\nfunction aggregateParams(_, pulse) {\n  const key    = _.field,\n        value  = _.value,\n        op     = (_.op === 'count' ? '__count__' : _.op) || 'sum',\n        fields = accessorFields(key).concat(accessorFields(value)),\n        keys   = pivotKeys(key, _.limit || 0, pulse);\n\n  // if data stream content changes, pivot fields may change\n  // flag parameter modification to ensure re-initialization\n  if (pulse.changed()) _.set('__pivot__', null, null, true);\n\n  return {\n    key:      _.key,\n    groupby:  _.groupby,\n    ops:      keys.map(() => op),\n    fields:   keys.map(k => get(k, key, value, fields)),\n    as:       keys.map(k => k + ''),\n    modified: _.modified.bind(_)\n  };\n}\n\n// Generate aggregate field accessor.\n// Output NaN for non-existent values; aggregator will ignore!\nfunction get(k, key, value, fields) {\n  return accessor(\n    d => key(d) === k ? value(d) : NaN,\n    fields,\n    k + ''\n  );\n}\n\n// Collect (and optionally limit) all unique pivot values.\nfunction pivotKeys(key, limit, pulse) {\n  const map = {},\n        list = [];\n\n  pulse.visit(pulse.SOURCE, t => {\n    const k = key(t);\n    if (!map[k]) {\n      map[k] = 1;\n      list.push(k);\n    }\n  });\n\n  list.sort(ascending);\n\n  return limit ? list.slice(0, limit) : list;\n}\n","import Facet from './Facet';\nimport {ingest, tupleid} from 'vega-dataflow';\nimport {accessorFields, error, inherits} from 'vega-util';\n\n/**\n * Partitions pre-faceted data into tuple subflows.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(Dataflow, string): Operator} params.subflow - A function\n *   that generates a subflow of operators and returns its root operator.\n * @param {function(object): Array<object>} params.field - The field\n *   accessor for an array of subflow tuple objects.\n */\nexport default function PreFacet(params) {\n  Facet.call(this, params);\n}\n\ninherits(PreFacet, Facet, {\n  transform(_, pulse) {\n    const flow = _.subflow,\n          field = _.field,\n          subflow = t => this.subflow(tupleid(t), flow, pulse, t);\n\n    if (_.modified('field') || field && pulse.modified(accessorFields(field))) {\n      error('PreFacet does not support field modification.');\n    }\n\n    this.initTargets(); // reset list of active subflows\n\n    if (field) {\n      pulse.visit(pulse.MOD, t => {\n        const sf = subflow(t);\n        field(t).forEach(_ => sf.mod(_));\n      });\n\n      pulse.visit(pulse.ADD, t => {\n        const sf = subflow(t);\n        field(t).forEach(_ => sf.add(ingest(_)));\n      });\n\n      pulse.visit(pulse.REM, t => {\n        const sf = subflow(t);\n        field(t).forEach(_ => sf.rem(_));\n      });\n    } else {\n      pulse.visit(pulse.MOD, t => subflow(t).mod(t));\n      pulse.visit(pulse.ADD, t => subflow(t).add(t));\n      pulse.visit(pulse.REM, t => subflow(t).rem(t));\n    }\n\n    if (pulse.clean()) {\n      pulse.runAfter(() => this.clean());\n    }\n\n    return pulse;\n  }\n});\n","import {fieldNames} from './util/util';\nimport {Transform, ingest, rederive, tupleid} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Performs a relational projection, copying selected fields from source\n * tuples to a new set of derived tuples.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *} params.fields - The fields to project,\n *   as an array of field accessors. If unspecified, all fields will be\n *   copied with names unchanged.\n * @param {Array<string>} [params.as] - Output field names for each projected\n *   field. Any unspecified fields will use the field name provided by\n *   the field accessor.\n */\nexport default function Project(params) {\n  Transform.call(this, null, params);\n}\n\nProject.Definition = {\n  'type': 'Project',\n  'metadata': {'generates': true, 'changes': true},\n  'params': [\n    { 'name': 'fields', 'type': 'field', 'array': true },\n    { 'name': 'as', 'type': 'string', 'null': true, 'array': true }\n  ]\n};\n\ninherits(Project, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE),\n          fields = _.fields,\n          as = fieldNames(_.fields, _.as || []),\n          derive = fields\n            ? (s, t) => project(s, t, fields, as)\n            : rederive;\n\n    let lut;\n    if (this.value) {\n      lut = this.value;\n    } else {\n      pulse = pulse.addAll();\n      lut = this.value = {};\n    }\n\n    pulse.visit(pulse.REM, t => {\n      const id = tupleid(t);\n      out.rem.push(lut[id]);\n      lut[id] = null;\n    });\n\n    pulse.visit(pulse.ADD, t => {\n      const dt = derive(t, ingest({}));\n      lut[tupleid(t)] = dt;\n      out.add.push(dt);\n    });\n\n    pulse.visit(pulse.MOD, t => {\n      out.mod.push(derive(t, lut[tupleid(t)]));\n    });\n\n    return out;\n  }\n});\n\nfunction project(s, t, fields, as) {\n  for (let i=0, n=fields.length; i<n; ++i) {\n    t[as[i]] = fields[i](s);\n  }\n  return t;\n}\n","import {Transform} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Proxy the value of another operator as a pure signal value.\n * Ensures no tuples are propagated.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {*} params.value - The value to proxy, becomes the value of this operator.\n */\nexport default function Proxy(params) {\n  Transform.call(this, null, params);\n}\n\ninherits(Proxy, Transform, {\n  transform(_, pulse) {\n    this.value = _.value;\n    return _.modified('value')\n      ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS)\n      : pulse.StopPropagation;\n  }\n});\n","import {partition} from './util/util';\nimport {Transform, ingest} from 'vega-dataflow';\nimport {quantiles} from 'vega-statistics';\nimport {accessorName, inherits} from 'vega-util';\nimport {range} from 'd3-array';\n\n/**\n * Generates sample quantile values from an input data stream.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - An accessor for the data field\n *   over which to calculate quantile values.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n *   to groupby.\n * @param {Array<number>} [params.probs] - An array of probabilities in\n *   the range (0, 1) for which to compute quantile values. If not specified,\n *   the *step* parameter will be used.\n * @param {Array<number>} [params.step=0.01] - A probability step size for\n *   sampling quantile values. All values from one-half the step size up to\n *   1 (exclusive) will be sampled. This parameter is only used if the\n *   *quantiles* parameter is not provided.\n */\nexport default function Quantile(params) {\n  Transform.call(this, null, params);\n}\n\nQuantile.Definition = {\n  'type': 'Quantile',\n  'metadata': {'generates': true, 'changes': true},\n  'params': [\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'probs', 'type': 'number', 'array': true },\n    { 'name': 'step', 'type': 'number', 'default': 0.01 },\n    { 'name': 'as', 'type': 'string', 'array': true, 'default': ['prob', 'value'] }\n  ]\n};\n\nconst EPSILON = 1e-14;\n\ninherits(Quantile, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n          as = _.as || ['prob', 'value'];\n\n    if (this.value && !_.modified() && !pulse.changed()) {\n      out.source = this.value;\n      return out;\n    }\n\n    const source = pulse.materialize(pulse.SOURCE).source,\n          groups = partition(source, _.groupby, _.field),\n          names = (_.groupby || []).map(accessorName),\n          values = [],\n          step = _.step || 0.01,\n          p = _.probs || range(step/2, 1 - EPSILON, step),\n          n = p.length;\n\n    groups.forEach(g => {\n      const q = quantiles(g, p);\n\n      for (let i=0; i<n; ++i) {\n        const t = {};\n        for (let i=0; i<names.length; ++i) {\n          t[names[i]] = g.dims[i];\n        }\n        t[as[0]] = p[i];\n        t[as[1]] = q[i];\n        values.push(ingest(t));\n      }\n    });\n\n    if (this.value) out.rem = this.value;\n    this.value = out.add = out.source = values;\n\n    return out;\n  }\n});\n","import {Transform, derive, tupleid} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Relays a data stream between data processing pipelines.\n * If the derive parameter is set, this transform will create derived\n * copies of observed tuples. This provides derived data streams in which\n * modifications to the tuples do not pollute an upstream data source.\n * @param {object} params - The parameters for this operator.\n * @param {number} [params.derive=false] - Boolean flag indicating if\n *   the transform should make derived copies of incoming tuples.\n * @constructor\n */\nexport default function Relay(params) {\n  Transform.call(this, null, params);\n}\n\ninherits(Relay, Transform, {\n  transform(_, pulse) {\n    let out, lut;\n\n    if (this.value) {\n      lut = this.value;\n    } else {\n      out = pulse = pulse.addAll();\n      lut = this.value = {};\n    }\n\n    if (_.derive) {\n      out = pulse.fork(pulse.NO_SOURCE);\n\n      pulse.visit(pulse.REM, t => {\n        const id = tupleid(t);\n        out.rem.push(lut[id]);\n        lut[id] = null;\n      });\n\n      pulse.visit(pulse.ADD, t => {\n        const dt = derive(t);\n        lut[tupleid(t)] = dt;\n        out.add.push(dt);\n      });\n\n      pulse.visit(pulse.MOD, t => {\n        const dt = lut[tupleid(t)];\n        for (const k in t) {\n          dt[k] = t[k];\n          // down stream writes may overwrite re-derived tuples\n          // conservatively mark all source fields as modified\n          out.modifies(k);\n        }\n        out.mod.push(dt);\n      });\n    }\n\n    return out;\n  }\n});\n","import {Transform, tupleid} from 'vega-dataflow';\nimport {random} from 'vega-statistics';\nimport {inherits} from 'vega-util';\n\n/**\n * Samples tuples passing through this operator.\n * Uses reservoir sampling to maintain a representative sample.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {number} [params.size=1000] - The maximum number of samples.\n */\nexport default function Sample(params) {\n  Transform.call(this, [], params);\n  this.count = 0;\n}\n\nSample.Definition = {\n  'type': 'Sample',\n  'metadata': {},\n  'params': [\n    { 'name': 'size', 'type': 'number', 'default': 1000 }\n  ]\n};\n\ninherits(Sample, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE),\n          mod = _.modified('size'),\n          num = _.size,\n          map = this.value.reduce((m, t) => (m[tupleid(t)] = 1, m), {});\n\n    let res = this.value,\n        cnt = this.count,\n        cap = 0;\n\n    // sample reservoir update function\n    function update(t) {\n      let p, idx;\n\n      if (res.length < num) {\n        res.push(t);\n      } else {\n        idx = ~~((cnt + 1) * random());\n        if (idx < res.length && idx >= cap) {\n          p = res[idx];\n          if (map[tupleid(p)]) out.rem.push(p); // eviction\n          res[idx] = t;\n        }\n      }\n      ++cnt;\n    }\n\n    if (pulse.rem.length) {\n      // find all tuples that should be removed, add to output\n      pulse.visit(pulse.REM, t => {\n        const id = tupleid(t);\n        if (map[id]) {\n          map[id] = -1;\n          out.rem.push(t);\n        }\n        --cnt;\n      });\n\n      // filter removed tuples out of the sample reservoir\n      res = res.filter(t => map[tupleid(t)] !== -1);\n    }\n\n    if ((pulse.rem.length || mod) && res.length < num && pulse.source) {\n      // replenish sample if backing data source is available\n      cap = cnt = res.length;\n      pulse.visit(pulse.SOURCE, t => {\n        // update, but skip previously sampled tuples\n        if (!map[tupleid(t)]) update(t);\n      });\n      cap = -1;\n    }\n\n    if (mod && res.length > num) {\n      const n = res.length-num;\n      for (let i=0; i<n; ++i) {\n        map[tupleid(res[i])] = -1;\n        out.rem.push(res[i]);\n      }\n      res = res.slice(n);\n    }\n\n    if (pulse.mod.length) {\n      // propagate modified tuples in the sample reservoir\n      pulse.visit(pulse.MOD, t => {\n        if (map[tupleid(t)]) out.mod.push(t);\n      });\n    }\n\n    if (pulse.add.length) {\n      // update sample reservoir\n      pulse.visit(pulse.ADD, update);\n    }\n\n    if (pulse.add.length || cap < 0) {\n      // output newly added tuples\n      out.add = res.filter(t => !map[tupleid(t)]);\n    }\n\n    this.count = cnt;\n    this.value = out.source = res;\n    return out;\n  }\n});\n","import {Transform, ingest} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\nimport {range} from 'd3-array';\n\n/**\n * Generates data tuples for a specified sequence range of numbers.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {number} params.start - The first number in the sequence.\n * @param {number} params.stop - The last number (exclusive) in the sequence.\n * @param {number} [params.step=1] - The step size between numbers in the sequence.\n */\nexport default function Sequence(params) {\n  Transform.call(this, null, params);\n}\n\nSequence.Definition = {\n  'type': 'Sequence',\n  'metadata': {'generates': true, 'changes': true},\n  'params': [\n    { 'name': 'start', 'type': 'number', 'required': true },\n    { 'name': 'stop', 'type': 'number', 'required': true },\n    { 'name': 'step', 'type': 'number', 'default': 1 },\n    { 'name': 'as', 'type': 'string', 'default': 'data' }\n  ]\n};\n\ninherits(Sequence, Transform, {\n  transform(_, pulse) {\n    if (this.value && !_.modified()) return;\n\n    const out = pulse.materialize().fork(pulse.MOD),\n          as = _.as || 'data';\n\n    out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;\n\n    this.value = range(_.start, _.stop, _.step || 1).map(v => {\n      const t = {};\n      t[as] = v;\n      return ingest(t);\n    });\n\n    out.add = pulse.add.concat(this.value);\n\n    return out;\n  }\n});\n","import {Transform} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Propagates a new pulse without any tuples so long as the input\n * pulse contains some added, removed or modified tuples.\n * @param {object} params - The parameters for this operator.\n * @constructor\n */\nexport default function Sieve(params) {\n  Transform.call(this, null, params);\n  this.modified(true); // always treat as modified\n}\n\ninherits(Sieve, Transform, {\n  transform(_, pulse) {\n    this.value = pulse.source;\n    return pulse.changed()\n      ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS)\n      : pulse.StopPropagation;\n  }\n});\n\n","import {Transform} from 'vega-dataflow';\nimport {\n  TIME_UNITS, timeBin, timeFloor, timeInterval, timeUnits,\n  utcFloor, utcInterval\n} from 'vega-time';\nimport {accessorFields, extent, inherits, peek} from 'vega-util';\n\n/**\n * Discretize dates to specific time units.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The data field containing date/time values.\n */\nexport default function TimeUnit(params) {\n  Transform.call(this, null, params);\n}\n\nconst OUTPUT = ['unit0', 'unit1'];\n\nTimeUnit.Definition = {\n  'type': 'TimeUnit',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'interval', 'type': 'boolean', 'default': true },\n    { 'name': 'units', 'type': 'enum', 'values': TIME_UNITS, 'array': true },\n    { 'name': 'step', 'type': 'number', 'default': 1 },\n    { 'name': 'maxbins', 'type': 'number', 'default': 40 },\n    { 'name': 'extent', 'type': 'date', 'array': true},\n    { 'name': 'timezone', 'type': 'enum', 'default': 'local', 'values': ['local', 'utc'] },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': OUTPUT }\n  ]\n};\n\ninherits(TimeUnit, Transform, {\n  transform(_, pulse) {\n    const field = _.field,\n          band = _.interval !== false,\n          utc = _.timezone === 'utc',\n          floor = this._floor(_, pulse),\n          offset = (utc ? utcInterval : timeInterval)(floor.unit).offset,\n          as = _.as || OUTPUT,\n          u0 = as[0],\n          u1 = as[1],\n          step = floor.step;\n\n    let min = floor.start || Infinity,\n        max = floor.stop || -Infinity,\n        flag = pulse.ADD;\n\n    if (\n      _.modified() ||\n      pulse.changed(pulse.REM) ||\n      pulse.modified(accessorFields(field))\n    ) {\n      pulse = pulse.reflow(true);\n      flag = pulse.SOURCE;\n      min = Infinity;\n      max = -Infinity;\n    }\n\n    pulse.visit(flag, t => {\n      const v = field(t);\n      let a, b;\n      if (v == null) {\n        t[u0] = null;\n        if (band) t[u1] = null;\n      } else {\n        t[u0] = a = b = floor(v);\n        if (band) t[u1] = b = offset(a, step);\n        if (a < min) min = a;\n        if (b > max) max = b;\n      }\n    });\n\n    floor.start = min;\n    floor.stop = max;\n\n    return pulse.modifies(band ? as : u0);\n  },\n\n  _floor(_, pulse) {\n    const utc = _.timezone === 'utc';\n\n    // get parameters\n    const {units, step} = _.units\n      ? {units: _.units, step: _.step || 1}\n      : timeBin({\n        extent:  _.extent || extent(pulse.materialize(pulse.SOURCE).source, _.field),\n        maxbins: _.maxbins\n      });\n\n    // check / standardize time units\n    const tunits = timeUnits(units),\n          prev = this.value || {},\n          floor = (utc ? utcFloor : timeFloor)(tunits, step);\n\n    floor.unit = peek(tunits);\n    floor.units = tunits;\n    floor.step = step;\n    floor.start = prev.start;\n    floor.stop = prev.stop;\n    return this.value = floor;\n  }\n});\n","import {Transform} from 'vega-dataflow';\nimport {fastmap, inherits} from 'vega-util';\n\n/**\n * An index that maps from unique, string-coerced, field values to tuples.\n * Assumes that the field serves as a unique key with no duplicate values.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The field accessor to index.\n */\nexport default function TupleIndex(params) {\n  Transform.call(this, fastmap(), params);\n}\n\ninherits(TupleIndex, Transform, {\n  transform(_, pulse) {\n    const df = pulse.dataflow,\n        field = _.field,\n        index = this.value,\n        set = t => index.set(field(t), t);\n\n    let mod = true;\n\n    if (_.modified('field') || pulse.modified(field.fields)) {\n      index.clear();\n      pulse.visit(pulse.SOURCE, set);\n    } else if (pulse.changed()) {\n      pulse.visit(pulse.REM, t => index.delete(field(t)));\n      pulse.visit(pulse.ADD, set);\n    } else {\n      mod = false;\n    }\n\n    this.modified(mod);\n    if (index.empty > df.cleanThreshold) df.runAfter(index.clean);\n    return pulse.fork();\n  }\n});\n","import {Transform, stableCompare} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Extracts an array of values. Assumes the source data has already been\n * reduced as needed (e.g., by an upstream Aggregate transform).\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The domain field to extract.\n * @param {function(*,*): number} [params.sort] - An optional\n *   comparator function for sorting the values. The comparator will be\n *   applied to backing tuples prior to value extraction.\n */\nexport default function Values(params) {\n  Transform.call(this, null, params);\n}\n\ninherits(Values, Transform, {\n  transform(_, pulse) {\n    const run = !this.value\n      || _.modified('field')\n      || _.modified('sort')\n      || pulse.changed()\n      || (_.sort && pulse.modified(_.sort.fields));\n\n    if (run) {\n      this.value = (_.sort\n        ? pulse.source.slice().sort(stableCompare(_.sort))\n        : pulse.source).map(_.field);\n    }\n  }\n});","import {error, zero} from 'vega-util';\n\nexport function WindowOp(op, field, param, as) {\n  const fn = WindowOps[op](field, param);\n  return {\n    init:   fn.init || zero,\n    update: function(w, t) { t[as] = fn.next(w); }\n  };\n}\n\nexport const WindowOps = {\n  row_number: function() {\n    return {\n      next: w => w.index + 1\n    };\n  },\n  rank: function() {\n    let rank;\n    return {\n      init: () => rank = 1,\n      next: w => {\n        const i = w.index,\n              data = w.data;\n        return (i && w.compare(data[i - 1], data[i])) ? (rank = i + 1) : rank;\n      }\n    };\n  },\n  dense_rank: function() {\n    let drank;\n    return {\n      init: () => drank = 1,\n      next: w => {\n        const i = w.index,\n              d = w.data;\n        return (i && w.compare(d[i - 1], d[i])) ? ++drank : drank;\n      }\n    };\n  },\n  percent_rank: function() {\n    const rank = WindowOps.rank(),\n          next = rank.next;\n    return {\n      init: rank.init,\n      next: w => (next(w) - 1) / (w.data.length - 1)\n    };\n  },\n  cume_dist: function() {\n    let cume;\n    return {\n      init: () => cume = 0,\n      next: w => {\n        const d = w.data,\n              c = w.compare;\n        let i = w.index;\n        if (cume < i) {\n          while (i + 1 < d.length && !c(d[i], d[i + 1])) ++i;\n          cume = i;\n        }\n        return (1 + cume) / d.length;\n      }\n    };\n  },\n  ntile: function(field, num) {\n    num = +num;\n    if (!(num > 0)) error('ntile num must be greater than zero.');\n    const cume = WindowOps.cume_dist(),\n          next = cume.next;\n    return {\n      init: cume.init,\n      next: w => Math.ceil(num * next(w))\n    };\n  },\n\n  lag: function(field, offset) {\n    offset = +offset || 1;\n    return {\n      next: w => {\n        const i = w.index - offset;\n        return i >= 0 ? field(w.data[i]) : null;\n      }\n    };\n  },\n  lead: function(field, offset) {\n    offset = +offset || 1;\n    return {\n      next: w => {\n        const i = w.index + offset,\n            d = w.data;\n        return i < d.length ? field(d[i]) : null;\n      }\n    };\n  },\n\n  first_value: function(field) {\n    return {\n      next: w => field(w.data[w.i0])\n    };\n  },\n  last_value: function(field) {\n    return {\n      next: w => field(w.data[w.i1 - 1])\n    };\n  },\n  nth_value: function(field, nth) {\n    nth = +nth;\n    if (!(nth > 0)) error('nth_value nth must be greater than zero.');\n    return {\n      next: w => {\n        const i = w.i0 + (nth - 1);\n        return i < w.i1 ? field(w.data[i]) : null;\n      }\n    };\n  },\n\n  prev_value: function(field) {\n    let prev;\n    return {\n      init: () => prev = null,\n      next: w => {\n        const v = field(w.data[w.index]);\n        return v != null ? (prev = v) : prev;\n      }\n    };\n  },\n  next_value: function(field) {\n    let v, i;\n    return {\n      init: () => (v = null, i = -1),\n      next: w => {\n        const d = w.data;\n        return w.index <= i ? v\n          : (i = find(field, d, w.index)) < 0\n            ? (i = d.length, v = null)\n            : (v = field(d[i]));\n      }\n    };\n  }\n};\n\nfunction find(field, data, index) {\n  for (let n = data.length; index < n; ++index) {\n    const v = field(data[index]);\n    if (v != null) return index;\n  }\n  return -1;\n}\n\nexport const ValidWindowOps = Object.keys(WindowOps);\n","import {compileMeasures, createMeasure, measureName} from './AggregateOps';\nimport TupleStore from './TupleStore';\nimport {WindowOp, WindowOps} from './WindowOps';\nimport {accessorFields, accessorName, array, error, hasOwnProperty} from 'vega-util';\n\nexport default function WindowState(_) {\n  const ops = array(_.ops),\n        fields = array(_.fields),\n        params = array(_.params),\n        as = array(_.as),\n        outputs = this.outputs = [],\n        windows = this.windows = [],\n        inputs = {},\n        map = {},\n        counts = [],\n        measures = [];\n\n  let countOnly = true;\n\n  function visitInputs(f) {\n    array(accessorFields(f)).forEach(_ => inputs[_] = 1);\n  }\n  visitInputs(_.sort);\n\n  ops.forEach((op, i) => {\n    const field = fields[i],\n          mname = accessorName(field),\n          name = measureName(op, mname, as[i]);\n\n    visitInputs(field);\n    outputs.push(name);\n\n    // Window operation\n    if (hasOwnProperty(WindowOps, op)) {\n      windows.push(WindowOp(op, fields[i], params[i], name));\n    }\n\n    // Aggregate operation\n    else {\n      if (field == null && op !== 'count') {\n        error('Null aggregate field specified.');\n      }\n      if (op === 'count') {\n        counts.push(name);\n        return;\n      }\n\n      countOnly = false;\n      let m = map[mname];\n      if (!m) {\n        m = (map[mname] = []);\n        m.field = field;\n        measures.push(m);\n      }\n      m.push(createMeasure(op, name));\n    }\n  });\n\n  if (counts.length || measures.length) {\n    this.cell = cell(measures, counts, countOnly);\n  }\n\n  this.inputs = Object.keys(inputs);\n}\n\nconst prototype = WindowState.prototype;\n\nprototype.init = function() {\n  this.windows.forEach(_ => _.init());\n  if (this.cell) this.cell.init();\n};\n\nprototype.update = function(w, t) {\n  const cell = this.cell,\n        wind = this.windows,\n        data = w.data,\n        m = wind && wind.length;\n  let j;\n\n  if (cell) {\n    for (j = w.p0; j < w.i0; ++j) cell.rem(data[j]);\n    for (j = w.p1; j < w.i1; ++j) cell.add(data[j]);\n    cell.set(t);\n  }\n  for (j = 0; j < m; ++j) wind[j].update(w, t);\n};\n\nfunction cell(measures, counts, countOnly) {\n  measures = measures.map(m => compileMeasures(m, m.field));\n\n  const cell = {\n    num:   0,\n    agg:   null,\n    store: false,\n    count: counts\n  };\n\n  if (!countOnly) {\n    var n = measures.length,\n        a = cell.agg = Array(n),\n        i = 0;\n    for (; i<n; ++i) a[i] = new measures[i](cell);\n  }\n\n  if (cell.store) {\n    var store = cell.data = new TupleStore();\n  }\n\n  cell.add = function(t) {\n    cell.num += 1;\n    if (countOnly) return;\n    if (store) store.add(t);\n    for (let i=0; i<n; ++i) {\n      a[i].add(a[i].get(t), t);\n    }\n  };\n\n  cell.rem = function(t) {\n    cell.num -= 1;\n    if (countOnly) return;\n    if (store) store.rem(t);\n    for (let i=0; i<n; ++i) {\n      a[i].rem(a[i].get(t), t);\n    }\n  };\n\n  cell.set = function(t) {\n    let i, n;\n\n    // consolidate stored values\n    if (store) store.values();\n\n    // update tuple properties\n    for (i=0, n=counts.length; i<n; ++i) t[counts[i]] = cell.num;\n    if (!countOnly) for (i=0, n=a.length; i<n; ++i) a[i].set(t);\n  };\n\n  cell.init = function() {\n    cell.num = 0;\n    if (store) store.reset();\n    for (let i=0; i<n; ++i) a[i].init();\n  };\n\n  return cell;\n}\n","import {groupkey} from './util/AggregateKeys';\nimport {ValidAggregateOps} from './util/AggregateOps';\nimport SortedList from './util/SortedList';\nimport {ValidWindowOps} from './util/WindowOps';\nimport WindowState from './util/WindowState';\nimport {Transform, stableCompare, tupleid} from 'vega-dataflow';\nimport {constant, inherits} from 'vega-util';\nimport {bisector} from 'd3-array';\n\n/**\n * Perform window calculations and write results to the input stream.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.\n * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.\n * @param {Array<function(object): *>} [params.fields] - An array of accessors\n *   for data fields to use as inputs to window operations.\n * @param {Array<*>} [params.params] - An array of parameter values for window operations.\n * @param {Array<string>} [params.as] - An array of output field names for window operations.\n * @param {Array<number>} [params.frame] - Window frame definition as two-element array.\n * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row\n *   number alone, ignoring peers with identical sort values. If false (default),\n *   the window boundaries will be adjusted to include peer values.\n */\nexport default function Window(params) {\n  Transform.call(this, {}, params);\n  this._mlen = 0;\n  this._mods = [];\n}\n\nWindow.Definition = {\n  'type': 'Window',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'sort', 'type': 'compare' },\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'ops', 'type': 'enum', 'array': true, 'values': ValidWindowOps.concat(ValidAggregateOps) },\n    { 'name': 'params', 'type': 'number', 'null': true, 'array': true },\n    { 'name': 'fields', 'type': 'field', 'null': true, 'array': true },\n    { 'name': 'as', 'type': 'string', 'null': true, 'array': true },\n    { 'name': 'frame', 'type': 'number', 'null': true, 'array': true, 'length': 2, 'default': [null, 0] },\n    { 'name': 'ignorePeers', 'type': 'boolean', 'default': false }\n  ]\n};\n\ninherits(Window, Transform, {\n  transform(_, pulse) {\n    this.stamp = pulse.stamp;\n\n    const mod = _.modified(),\n          cmp = stableCompare(_.sort),\n          key = groupkey(_.groupby),\n          group = t => this.group(key(t));\n\n    // initialize window state\n    let state = this.state;\n    if (!state || mod) {\n      state = this.state = new WindowState(_);\n    }\n\n    // partition input tuples\n    if (mod || pulse.modified(state.inputs)) {\n      this.value = {};\n      pulse.visit(pulse.SOURCE, t => group(t).add(t));\n    } else {\n      pulse.visit(pulse.REM, t => group(t).remove(t));\n      pulse.visit(pulse.ADD, t => group(t).add(t));\n    }\n\n    // perform window calculations for each modified partition\n    for (let i=0, n=this._mlen; i<n; ++i) {\n      processPartition(this._mods[i], state, cmp, _);\n    }\n    this._mlen = 0;\n    this._mods = [];\n\n    // TODO don't reflow everything?\n    return pulse.reflow(mod).modifies(state.outputs);\n  },\n\n  group(key) {\n    let group = this.value[key];\n\n    if (!group) {\n      group = this.value[key] = SortedList(tupleid);\n      group.stamp = -1;\n    }\n\n    if (group.stamp < this.stamp) {\n      group.stamp = this.stamp;\n      this._mods[this._mlen++] = group;\n    }\n\n    return group;\n  }\n});\n\nfunction processPartition(list, state, cmp, _) {\n  const sort = _.sort,\n        range = sort && !_.ignorePeers,\n        frame = _.frame || [null, 0],\n        data = list.data(cmp), // use cmp for stable sort\n        n = data.length,\n        b = range ? bisector(sort) : null,\n        w = {\n          i0: 0, i1: 0, p0: 0, p1: 0, index: 0,\n          data: data, compare: sort || constant(-1)\n        };\n\n  state.init();\n  for (let i=0; i<n; ++i) {\n    setWindow(w, frame, i, n);\n    if (range) adjustRange(w, b);\n    state.update(w, data[i]);\n  }\n}\n\nfunction setWindow(w, f, i, n) {\n  w.p0 = w.i0;\n  w.p1 = w.i1;\n  w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));\n  w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);\n  w.index = i;\n}\n\n// if frame type is 'range', adjust window for peer values\nfunction adjustRange(w, bisect) {\n  const r0 = w.i0,\n        r1 = w.i1 - 1,\n        c = w.compare,\n        d = w.data,\n        n = d.length - 1;\n\n  if (r0 > 0 && !c(d[r0], d[r0-1])) w.i0 = bisect.left(d, d[r0]);\n  if (r1 < n && !c(d[r1], d[r1+1])) w.i1 = bisect.right(d, d[r1]);\n}\n","import ascending from \"./ascending.js\";\n\nexport default function bisector(f) {\n  let delta = f;\n  let compare1 = f;\n  let compare2 = f;\n\n  if (f.length !== 2) {\n    delta = (d, x) => f(d) - x;\n    compare1 = ascending;\n    compare2 = (d, x) => ascending(f(d), x);\n  }\n\n  function left(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function right(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) <= 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function center(a, x, lo = 0, hi = a.length) {\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n"],"names":["groupkey","fields","length","f","x","n","i","k","String","measureName","op","field","as","noop","base_op","init","add","rem","idx","AggregateOps","values","m","cell","store","value","data","count","num","__count__","missing","valid","sum","v","product","undefined","mean","mean_d","average","req","variance","dev","variancep","stdev","Math","sqrt","stdevp","stderr","distinct","get","ci0","ci1","median","q2","q1","q3","min","Number","isNaN","NaN","max","argmin","t","argmax","ValidAggregateOps","Object","keys","createMeasure","name","compareIndex","a","b","_ops","forEach","this","set","_out","out","compileMeasures","agg","identity","ops","map","getreqs","key","sort","resolve","slice","ctr","prototype","TupleStore","_key","tupleid","reset","extend","measure","Aggregate","params","Transform","call","_adds","_mods","_alen","_mlen","_drop","_cross","_dims","_dnames","_measures","_countOnly","_counts","_prev","_inputs","_outputs","prototype$1","_add","_rem","_ext","_get","_q","push","r","Array","j","s","hasOwnProperty","extent","extentIndex","quartile","quartiles","ci","_ci","bootstrapCI","Definition","type","metadata","generates","changes","array","null","default","inherits","transform","_","pulse","aggr","fork","NO_SOURCE","NO_FIELDS","mod","modified","stamp","visit","SOURCE","REM","ADD","modifies","drop","cross","clean","runAfter","curr","dims","vals","collect","cells","tuple","generate","base","index","inputs","outputs","inputMap","inputVisit","accessorFields","groupby","d","dname","accessorName","cellkey","mname","outname","error","newcell","newtuple","measures","p","names","replace","ingest","celltuple","counts","adds","mods","prev","Bin","SortedList","idFunc","source","input","$","cnt","remove","size","compare","resort","filter","merge","concat","Collect","Compare","Operator","update","orders","CountPattern","Cross","required","band","interval","bins","_bins","start","step","b0","b1","flag","reflow","ADD_MOD","bin","stop","ceil","anchor","floor","toNumber","Infinity","accessor","ALL","list","materialize","changed","stableCompare","root","process","tokens","text","tcase","match","toUpperCase","toLowerCase","tokenize","case","test","_parameterCheck","_match","_stop","_finish","RegExp","stopwords","pattern","tuples","_tuples","w","c","ADD_REM","left","truthy","Distributions","kde","randomKDE","mixture","randomMixture","normal","randomNormal","lognormal","randomLogNormal","uniform","randomUniform","FUNCTION","parse","def","func","from","Density","distributions","function","fieldNames","partition","groups","g","dist","parseDist","distribution","minsteps","steps","maxsteps","method","domain","sampleCurve","DotBin","Output","Expression","expr","datum","Extent","Subflow","parent","Facet","_keys","fastmap","_targets","active","Field","isArray","Filter","Flatten","Fold","Formula","Generate","ascending","compareDefined","ascendingDefined","TypeError","valueof","quickselect","right","arguments","z","log","exp","sd","swap","quantile","Float64Array","numbers","i0","value0","subarray","range","smooth","span","autostep","dotbin","isFinite","dataflow","warn","connect","target","detachSubflow","targets","evaluate","activate","flow","subflow","flows","df","sf","_group","detached","detach","initTargets","act","cache","rekey","group","id","delete","MOD","k0","k1","REFLOW","empty","cleanThreshold","output","isMod","revisit","has","arrays","maxlen","reduce","l","derive","fnames","initonly","gen","generator","Methods","Empty","Impute","JoinAggregate","KDE","Key","flat","Load","_pending","Lookup","MultiExtent","ext","extents","e","MultiValues","Params","Pivot","PreFacet","Project","Proxy","Quantile","gVals","kVal","impute","getValue","getField","fName","kName","gNames","keyvals","gKey","kMap","gMap","_impute","bandwidth","cumulative","density","scale","local","StopPropagation","format","async","request","url","then","res","touch","defaultValue","some","_transform","limit","pivotKeys","bind","aggregateParams","project","rederive","lut","addAll","dt","Relay","Sample","Sequence","Sieve","TimeUnit","probs","q","quantiles","cap","random","OUTPUT","TupleIndex","Values","TIME_UNITS","utc","timezone","_floor","offset","utcInterval","timeInterval","unit","u0","u1","units","timeBin","maxbins","tunits","timeUnits","utcFloor","timeFloor","peek","clear","WindowOps","row_number","next","rank","dense_rank","drank","percent_rank","cume_dist","cume","ntile","lag","lead","first_value","last_value","i1","nth_value","nth","prev_value","next_value","find","ValidWindowOps","WindowState","windows","countOnly","visitInputs","param","fn","zero","WindowOp","Window","processPartition","state","cmp","ignorePeers","frame","delta","compare1","compare2","lo","hi","mid","center","bisector","p0","p1","constant","setWindow","adjustRange","abs","bisect","r0","r1","wind"],"mappings":"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"}