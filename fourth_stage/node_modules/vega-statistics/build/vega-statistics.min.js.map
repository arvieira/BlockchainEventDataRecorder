{"version":3,"file":"vega-statistics.min.js","sources":["../src/numbers.js","../../../node_modules/d3-array/src/ascending.js","../../../node_modules/d3-array/src/number.js","../../../node_modules/d3-array/src/sort.js","../../../node_modules/d3-array/src/max.js","../../../node_modules/d3-array/src/min.js","../../../node_modules/d3-array/src/quickselect.js","../../../node_modules/d3-array/src/quantile.js","../src/quantiles.js","../src/quartiles.js","../src/bandwidth.js","../../../node_modules/d3-array/src/deviation.js","../../../node_modules/d3-array/src/variance.js","../src/random.js","../src/constants.js","../src/normal.js","../src/lognormal.js","../src/uniform.js","../src/regression/ols.js","../src/regression/points.js","../src/regression/r-squared.js","../src/regression/linear.js","../src/regression/quad.js","../src/regression/poly.js","../src/regression/loess.js","../src/sampleCurve.js","../src/bin.js","../src/bootstrapCI.js","../src/dotbin.js","../src/integer.js","../src/kde.js","../src/lcg.js","../src/mixture.js","../src/regression/exp.js","../../../node_modules/d3-array/src/median.js","../src/regression/log.js","../src/regression/pow.js"],"sourcesContent":["export default function*(values, valueof) {\n  if (valueof == null) {\n    for (let value of values) {\n      if (value != null && value !== '' && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      value = valueof(value, ++index, values);\n      if (value != null && value !== '' && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n","export default function ascending(a, b) {\n  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","export default function number(x) {\n  return x === null ? NaN : +x;\n}\n\nexport function* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n","import ascending from \"./ascending.js\";\nimport permute from \"./permute.js\";\n\nexport default function sort(values, ...F) {\n  if (typeof values[Symbol.iterator] !== \"function\") throw new TypeError(\"values is not iterable\");\n  values = Array.from(values);\n  let [f] = F;\n  if ((f && f.length !== 2) || F.length > 1) {\n    const index = Uint32Array.from(values, (d, i) => i);\n    if (F.length > 1) {\n      F = F.map(f => values.map(f));\n      index.sort((i, j) => {\n        for (const f of F) {\n          const c = ascendingDefined(f[i], f[j]);\n          if (c) return c;\n        }\n      });\n    } else {\n      f = values.map(f);\n      index.sort((i, j) => ascendingDefined(f[i], f[j]));\n    }\n    return permute(values, index);\n  }\n  return values.sort(compareDefined(f));\n}\n\nexport function compareDefined(compare = ascending) {\n  if (compare === ascending) return ascendingDefined;\n  if (typeof compare !== \"function\") throw new TypeError(\"compare is not a function\");\n  return (a, b) => {\n    const x = compare(a, b);\n    if (x || x === 0) return x;\n    return (compare(b, b) === 0) - (compare(a, a) === 0);\n  };\n}\n\nexport function ascendingDefined(a, b) {\n  return (a == null || !(a >= a)) - (b == null || !(b >= b)) || (a < b ? -1 : a > b ? 1 : 0);\n}\n","export default function max(values, valueof) {\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  }\n  return max;\n}\n","export default function min(values, valueof) {\n  let min;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  }\n  return min;\n}\n","import {ascendingDefined, compareDefined} from \"./sort.js\";\n\n// Based on https://github.com/mourner/quickselect\n// ISC license, Copyright 2018 Vladimir Agafonkin.\nexport default function quickselect(array, k, left = 0, right = array.length - 1, compare) {\n  compare = compare === undefined ? ascendingDefined : compareDefined(compare);\n\n  while (right > left) {\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(array, k, newLeft, newRight, compare);\n    }\n\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    swap(array, left, k);\n    if (compare(array[right], t) > 0) swap(array, left, right);\n\n    while (i < j) {\n      swap(array, i, j), ++i, --j;\n      while (compare(array[i], t) < 0) ++i;\n      while (compare(array[j], t) > 0) --j;\n    }\n\n    if (compare(array[left], t) === 0) swap(array, left, j);\n    else ++j, swap(array, j, right);\n\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n  return array;\n}\n\nfunction swap(array, i, j) {\n  const t = array[i];\n  array[i] = array[j];\n  array[j] = t;\n}\n","import max from \"./max.js\";\nimport min from \"./min.js\";\nimport quickselect from \"./quickselect.js\";\nimport number, {numbers} from \"./number.js\";\n\nexport default function quantile(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return min(values);\n  if (p >= 1) return max(values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\n      value1 = min(values.subarray(i0 + 1));\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nexport function quantileSorted(values, p, valueof = number) {\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\n","import numbers from './numbers';\nimport {ascending, quantileSorted} from 'd3-array';\n\nexport default function(array, p, f) {\n  const values = Float64Array.from(numbers(array, f));\n\n  // don't depend on return value from typed array sort call\n  // protects against undefined sort results in Safari (vega/vega-lite#4964)\n  values.sort(ascending);\n\n  return p.map(_ => quantileSorted(values, _));\n}\n","import quantiles from './quantiles';\n\nexport default function(array, f) {\n  return quantiles(array, [0.25, 0.50, 0.75], f);\n}\n","import quartiles from './quartiles';\nimport {deviation} from 'd3-array';\n\n// Scott, D. W. (1992) Multivariate Density Estimation:\n// Theory, Practice, and Visualization. Wiley.\nexport default function(array, f) {\n  const n = array.length,\n        d = deviation(array, f),\n        q = quartiles(array, f),\n        h = (q[2] - q[0]) / 1.34,\n        v = Math.min(d, h) || d || Math.abs(q[0]) || 1;\n  return 1.06 * v * Math.pow(n, -0.2);\n}\n","import variance from \"./variance.js\";\n\nexport default function deviation(values, valueof) {\n  const v = variance(values, valueof);\n  return v ? Math.sqrt(v) : v;\n}\n","export default function variance(values, valueof) {\n  let count = 0;\n  let delta;\n  let mean = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  }\n  if (count > 1) return sum / (count - 1);\n}\n","export var random = Math.random;\n\nexport function setRandom(r) {\n  random = r;\n}\n","export const SQRT2PI = Math.sqrt(2 * Math.PI);\nexport const SQRT2 = Math.SQRT2;","import {SQRT2, SQRT2PI} from './constants';\nimport {random} from './random';\n\nlet nextSample = NaN;\n\nexport function sampleNormal(mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n\n  let x = 0, y = 0, rds, c;\n  if (nextSample === nextSample) {\n    x = nextSample;\n    nextSample = NaN;\n  } else {\n    do {\n      x = random() * 2 - 1;\n      y = random() * 2 - 1;\n      rds = x * x + y * y;\n    } while (rds === 0 || rds > 1);\n    c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform\n    x *= c;\n    nextSample = y * c;\n  }\n  return mean + x * stdev;\n}\n\nexport function densityNormal(value, mean, stdev) {\n  stdev = stdev == null ? 1 : stdev;\n  const z = (value - (mean || 0)) / stdev;\n  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);\n}\n\n// Approximation from West (2009)\n// Better Approximations to Cumulative Normal Functions\nexport function cumulativeNormal(value, mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n\n  const z = (value - mean) / stdev,\n        Z = Math.abs(z);\n  let cd;\n\n  if (Z > 37) {\n    cd = 0;\n  } else {\n    const exp = Math.exp(-Z * Z / 2);\n    let sum;\n    if (Z < 7.07106781186547) {\n      sum = 3.52624965998911e-02 * Z + 0.700383064443688;\n      sum = sum * Z + 6.37396220353165;\n      sum = sum * Z + 33.912866078383;\n      sum = sum * Z + 112.079291497871;\n      sum = sum * Z + 221.213596169931;\n      sum = sum * Z + 220.206867912376;\n      cd = exp * sum;\n      sum = 8.83883476483184e-02 * Z + 1.75566716318264;\n      sum = sum * Z + 16.064177579207;\n      sum = sum * Z + 86.7807322029461;\n      sum = sum * Z + 296.564248779674;\n      sum = sum * Z + 637.333633378831;\n      sum = sum * Z + 793.826512519948;\n      sum = sum * Z + 440.413735824752;\n      cd = cd / sum;\n    } else {\n      sum = Z + 0.65;\n      sum = Z + 4 / sum;\n      sum = Z + 3 / sum;\n      sum = Z + 2 / sum;\n      sum = Z + 1 / sum;\n      cd = exp / sum / 2.506628274631;\n    }\n  }\n  return z > 0 ? 1 - cd : cd;\n}\n\n// Approximation of Probit function using inverse error function.\nexport function quantileNormal(p, mean, stdev) {\n  if (p < 0 || p > 1) return NaN;\n  return (mean || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);\n}\n\n// Approximate inverse error function. Implementation from \"Approximating\n// the erfinv function\" by Mike Giles, GPU Computing Gems, volume 2, 2010.\n// Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0\nfunction erfinv(x) {\n  // beware that the logarithm argument must be\n  // commputed as (1.0 - x) * (1.0 + x),\n  // it must NOT be simplified as 1.0 - x * x as this\n  // would induce rounding errors near the boundaries +/-1\n  let w = - Math.log((1 - x) * (1 + x)), p;\n\n  if (w < 6.25) {\n      w -= 3.125;\n      p =  -3.6444120640178196996e-21;\n      p =   -1.685059138182016589e-19 + p * w;\n      p =   1.2858480715256400167e-18 + p * w;\n      p =    1.115787767802518096e-17 + p * w;\n      p =   -1.333171662854620906e-16 + p * w;\n      p =   2.0972767875968561637e-17 + p * w;\n      p =   6.6376381343583238325e-15 + p * w;\n      p =  -4.0545662729752068639e-14 + p * w;\n      p =  -8.1519341976054721522e-14 + p * w;\n      p =   2.6335093153082322977e-12 + p * w;\n      p =  -1.2975133253453532498e-11 + p * w;\n      p =  -5.4154120542946279317e-11 + p * w;\n      p =    1.051212273321532285e-09 + p * w;\n      p =  -4.1126339803469836976e-09 + p * w;\n      p =  -2.9070369957882005086e-08 + p * w;\n      p =   4.2347877827932403518e-07 + p * w;\n      p =  -1.3654692000834678645e-06 + p * w;\n      p =  -1.3882523362786468719e-05 + p * w;\n      p =    0.0001867342080340571352 + p * w;\n      p =  -0.00074070253416626697512 + p * w;\n      p =   -0.0060336708714301490533 + p * w;\n      p =      0.24015818242558961693 + p * w;\n      p =       1.6536545626831027356 + p * w;\n  } else if (w < 16.0) {\n      w = Math.sqrt(w) - 3.25;\n      p =   2.2137376921775787049e-09;\n      p =   9.0756561938885390979e-08 + p * w;\n      p =  -2.7517406297064545428e-07 + p * w;\n      p =   1.8239629214389227755e-08 + p * w;\n      p =   1.5027403968909827627e-06 + p * w;\n      p =   -4.013867526981545969e-06 + p * w;\n      p =   2.9234449089955446044e-06 + p * w;\n      p =   1.2475304481671778723e-05 + p * w;\n      p =  -4.7318229009055733981e-05 + p * w;\n      p =   6.8284851459573175448e-05 + p * w;\n      p =   2.4031110387097893999e-05 + p * w;\n      p =   -0.0003550375203628474796 + p * w;\n      p =   0.00095328937973738049703 + p * w;\n      p =   -0.0016882755560235047313 + p * w;\n      p =    0.0024914420961078508066 + p * w;\n      p =   -0.0037512085075692412107 + p * w;\n      p =     0.005370914553590063617 + p * w;\n      p =       1.0052589676941592334 + p * w;\n      p =       3.0838856104922207635 + p * w;\n  } else if (Number.isFinite(w)) {\n      w = Math.sqrt(w) - 5.0;\n      p =  -2.7109920616438573243e-11;\n      p =  -2.5556418169965252055e-10 + p * w;\n      p =   1.5076572693500548083e-09 + p * w;\n      p =  -3.7894654401267369937e-09 + p * w;\n      p =   7.6157012080783393804e-09 + p * w;\n      p =  -1.4960026627149240478e-08 + p * w;\n      p =   2.9147953450901080826e-08 + p * w;\n      p =  -6.7711997758452339498e-08 + p * w;\n      p =   2.2900482228026654717e-07 + p * w;\n      p =  -9.9298272942317002539e-07 + p * w;\n      p =   4.5260625972231537039e-06 + p * w;\n      p =  -1.9681778105531670567e-05 + p * w;\n      p =   7.5995277030017761139e-05 + p * w;\n      p =  -0.00021503011930044477347 + p * w;\n      p =  -0.00013871931833623122026 + p * w;\n      p =       1.0103004648645343977 + p * w;\n      p =       4.8499064014085844221 + p * w;\n  } else {\n      p = Infinity;\n  }\n\n  return p * x;\n}\n\nexport default function(mean, stdev) {\n  let mu, sigma;\n\n  const dist = {\n    mean(_) {\n      if (arguments.length) {\n        mu = _ || 0;\n        return dist;\n      } else {\n        return mu;\n      }\n    },\n    stdev(_) {\n      if (arguments.length) {\n        sigma = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return sigma;\n      }\n    },\n    sample: () => sampleNormal(mu, sigma),\n    pdf: value => densityNormal(value, mu, sigma),\n    cdf: value => cumulativeNormal(value, mu, sigma),\n    icdf: p => quantileNormal(p, mu, sigma)\n  };\n\n  return dist.mean(mean).stdev(stdev);\n}\n","import {cumulativeNormal, quantileNormal, sampleNormal} from './normal';\nimport {SQRT2PI} from './constants';\n\nexport function sampleLogNormal(mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  return Math.exp(mean + sampleNormal() * stdev);\n}\n\nexport function densityLogNormal(value, mean, stdev) {\n  if (value <= 0) return 0;\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  const z = (Math.log(value) - mean) / stdev;\n  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value);\n}\n\nexport function cumulativeLogNormal(value, mean, stdev) {\n  return cumulativeNormal(Math.log(value), mean, stdev);\n}\n\nexport function quantileLogNormal(p, mean, stdev) {\n  return Math.exp(quantileNormal(p, mean, stdev));\n}\n\nexport default function(mean, stdev) {\n  let mu, sigma;\n\n  const dist = {\n    mean(_) {\n      if (arguments.length) {\n        mu = _ || 0;\n        return dist;\n      } else {\n        return mu;\n      }\n    },\n    stdev(_) {\n      if (arguments.length) {\n        sigma = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return sigma;\n      }\n    },\n    sample: () => sampleLogNormal(mu, sigma),\n    pdf: value => densityLogNormal(value, mu, sigma),\n    cdf: value => cumulativeLogNormal(value, mu, sigma),\n    icdf: p => quantileLogNormal(p, mu, sigma)\n  };\n\n  return dist.mean(mean).stdev(stdev);\n}\n","import {random} from './random';\n\nexport function sampleUniform(min, max) {\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return min + (max - min) * random();\n}\n\nexport function densityUniform(value, min, max) {\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return (value >= min && value <= max) ? 1 / (max - min) : 0;\n}\n\nexport function cumulativeUniform(value, min, max) {\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);\n}\n\nexport function quantileUniform(p, min, max) {\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return (p >= 0 && p <= 1) ? min + p * (max - min) : NaN;\n}\n\nexport default function(min, max) {\n  let a, b;\n\n  const dist = {\n    min(_) {\n      if (arguments.length) {\n        a = _ || 0;\n        return dist;\n      } else {\n        return a;\n      }\n    },\n    max(_) {\n      if (arguments.length) {\n        b = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return b;\n      }\n    },\n    sample: () => sampleUniform(a, b),\n    pdf: value => densityUniform(value, a, b),\n    cdf: value => cumulativeUniform(value, a, b),\n    icdf: p => quantileUniform(p, a, b)\n  };\n\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return dist.min(min).max(max);\n}\n","// Ordinary Least Squares\nexport default function(uX, uY, uXY, uX2) {\n  const delta = uX2 - uX * uX,\n        slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta,\n        intercept = uY - slope * uX;\n\n  return [intercept, slope];\n}\n","export function points(data, x, y, sort) {\n  data = data.filter(d => {\n    let u = x(d), v = y(d);\n    return u != null && (u = +u) >= u && v != null && (v = +v) >= v;\n  });\n\n  if (sort) {\n    data.sort((a, b) => x(a) - x(b));\n  }\n\n  const n = data.length,\n        X = new Float64Array(n),\n        Y = new Float64Array(n);\n\n  // extract values, calculate means\n  let i = 0, ux = 0, uy = 0, xv, yv, d;\n  for (d of data) {\n    X[i] = xv = +x(d);\n    Y[i] = yv = +y(d);\n    ++i;\n    ux += (xv - ux) / i;\n    uy += (yv - uy) / i;\n  }\n\n  // mean center the data\n  for (i=0; i<n; ++i) {\n    X[i] -= ux;\n    Y[i] -= uy;\n  }\n\n  return [X, Y, ux, uy];\n}\n\nexport function visitPoints(data, x, y, callback) {\n  let i = -1, u, v;\n\n  for (const d of data) {\n    u = x(d);\n    v = y(d);\n    if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) {\n      callback(u, v, ++i);\n    }\n  }\n}\n","import {visitPoints} from './points';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nexport default function(data, x, y, uY, predict) {\n  let SSE = 0, SST = 0;\n\n  visitPoints(data, x, y, (dx, dy) => {\n    const sse = dy - predict(dx),\n          sst = dy - uY;\n\n    SSE += sse * sse;\n    SST += sst * sst;\n  });\n\n  return 1 - SSE / SST;\n}\n","import ols from './ols';\nimport {visitPoints} from './points';\nimport rSquared from './r-squared';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nexport default function(data, x, y) {\n  let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;\n\n  visitPoints(data, x, y, (dx, dy) => {\n    ++n;\n    X += (dx - X) / n;\n    Y += (dy - Y) / n;\n    XY += (dx * dy - XY) / n;\n    X2 += (dx * dx - X2) / n;\n  });\n\n  const coef = ols(X, Y, XY, X2),\n        predict = x => coef[0] + coef[1] * x;\n\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, Y, predict)\n  };\n}\n","import {points} from './points';\nimport rSquared from './r-squared';\n\nexport default function(data, x, y) {\n  const [xv, yv, ux, uy] = points(data, x, y),\n        n = xv.length;\n\n  let X2 = 0, X3 = 0, X4 = 0, XY = 0, X2Y = 0,\n      i, dx, dy, x2;\n\n  for (i=0; i<n;) {\n    dx = xv[i];\n    dy = yv[i++];\n    x2 = dx * dx;\n    X2 += (x2 - X2) / i;\n    X3 += (x2 * dx - X3) / i;\n    X4 += (x2 * x2 - X4) / i;\n    XY += (dx * dy - XY) / i;\n    X2Y += (x2 * dy - X2Y) / i;\n  }\n\n  const X2X2 = X4 - (X2 * X2),\n        d = (X2 * X2X2 - X3 * X3),\n        a = (X2Y * X2 - XY * X3) / d,\n        b = (XY * X2X2 - X2Y * X3) / d,\n        c = -a * X2,\n        predict = x => {\n          x = x - ux;\n          return a * x * x + b * x + c + uy;\n        };\n\n  // transform coefficients back from mean-centered space\n  return {\n    coef: [\n      c - b * ux + a * ux * ux + uy,\n      b - 2 * a * ux,\n      a\n    ],\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n","import linear from './linear';\nimport {points} from './points';\nimport quad from './quad';\nimport rSquared from './r-squared';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n// ... which was adapted from regression-js by Tom Alexander\n// Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\n// License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\nexport default function(data, x, y, order) {\n  // use more efficient methods for lower orders\n  if (order === 1) return linear(data, x, y);\n  if (order === 2) return quad(data, x, y);\n\n  const [xv, yv, ux, uy] = points(data, x, y),\n        n = xv.length,\n        lhs = [],\n        rhs = [],\n        k = order + 1;\n\n  let i, j, l, v, c;\n\n  for (i=0; i<k; ++i) {\n    for (l=0, v=0; l<n; ++l) {\n      v += Math.pow(xv[l], i) * yv[l];\n    }\n    lhs.push(v);\n\n    c = new Float64Array(k);\n    for (j=0; j<k; ++j) {\n      for (l=0, v=0; l<n; ++l) {\n        v += Math.pow(xv[l], i + j);\n      }\n      c[j] = v;\n    }\n    rhs.push(c);\n  }\n  rhs.push(lhs);\n\n  const coef = gaussianElimination(rhs),\n        predict = x => {\n          x -= ux;\n          let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\n          for (i=3; i<k; ++i) y += coef[i] * Math.pow(x, i);\n          return y;\n        };\n\n  return {\n    coef: uncenter(k, coef, -ux, uy),\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n\nfunction uncenter(k, a, x, y) {\n  const z = Array(k);\n  let i, j, v, c;\n\n  // initialize to zero\n  for (i=0; i<k; ++i) z[i] = 0;\n\n  // polynomial expansion\n  for (i=k-1; i>=0; --i) {\n    v = a[i];\n    c = 1;\n    z[i] += v;\n    for (j=1; j<=i; ++j) {\n      c *= (i + 1 - j) / j; // binomial coefficent\n      z[i-j] += v * Math.pow(x, j) * c;\n    }\n  }\n\n  // bias term\n  z[0] += y;\n\n  return z;\n}\n\n// Given an array for a two-dimensional matrix and the polynomial order,\n// solve A * x = b using Gaussian elimination.\nfunction gaussianElimination(matrix) {\n  const n = matrix.length - 1,\n        coef = [];\n\n  let i, j, k, r, t;\n\n  for (i = 0; i < n; ++i) {\n    r = i; // max row\n    for (j = i + 1; j < n; ++j) {\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\n        r = j;\n      }\n    }\n\n    for (k = i; k < n + 1; ++k) {\n      t = matrix[k][i];\n      matrix[k][i] = matrix[k][r];\n      matrix[k][r] = t;\n    }\n\n    for (j = i + 1; j < n; ++j) {\n      for (k = n; k >= i; k--) {\n        matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\n      }\n    }\n  }\n\n  for (j = n - 1; j >= 0; --j) {\n    t = 0;\n    for (k = j + 1; k < n; ++k) {\n      t += matrix[k][j] * coef[k];\n    }\n    coef[j] = (matrix[n][j] - t) / matrix[j][j];\n  }\n\n  return coef;\n}","import ols from './ols';\nimport {points} from './points';\nimport {median} from 'd3-array';\n\nconst maxiters = 2,\n      epsilon = 1e-12;\n\n// Adapted from science.js by Jason Davies\n// Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js\n// License: https://github.com/jasondavies/science.js/blob/master/LICENSE\nexport default function(data, x, y, bandwidth) {\n  const [xv, yv, ux, uy] = points(data, x, y, true),\n        n = xv.length,\n        bw = Math.max(2, ~~(bandwidth * n)), // # nearest neighbors\n        yhat = new Float64Array(n),\n        residuals = new Float64Array(n),\n        robustWeights = new Float64Array(n).fill(1);\n\n  for (let iter = -1; ++iter <= maxiters; ) {\n    const interval = [0, bw - 1];\n\n    for (let i = 0; i < n; ++i) {\n      const dx = xv[i],\n            i0 = interval[0],\n            i1 = interval[1],\n            edge = (dx - xv[i0]) > (xv[i1] - dx) ? i0 : i1;\n\n      let W = 0, X = 0, Y = 0, XY = 0, X2 = 0;\n      const denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!\n\n      for (let k = i0; k <= i1; ++k) {\n        const xk = xv[k],\n              yk = yv[k],\n              w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],\n              xkw = xk * w;\n\n        W += w;\n        X += xkw;\n        Y += yk * w;\n        XY += yk * xkw;\n        X2 += xk * xkw;\n      }\n\n      // linear regression fit\n      const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);\n      yhat[i] = a + b * dx;\n      residuals[i] = Math.abs(yv[i] - yhat[i]);\n\n      updateInterval(xv, i + 1, interval);\n    }\n\n    if (iter === maxiters) {\n      break;\n    }\n\n    const medianResidual = median(residuals);\n    if (Math.abs(medianResidual) < epsilon) break;\n\n    for (let i = 0, arg, w; i < n; ++i){\n      arg = residuals[i] / (6 * medianResidual);\n      // default to epsilon (rather than zero) for large deviations\n      // keeping weights tiny but non-zero prevents singularites\n      robustWeights[i] = (arg >= 1) ? epsilon : ((w = 1 - arg * arg) * w);\n    }\n  }\n\n  return output(xv, yhat, ux, uy);\n}\n\n// weighting kernel for local regression\nfunction tricube(x) {\n  return (x = 1 - x * x * x) * x * x;\n}\n\n// advance sliding window interval of nearest neighbors\nfunction updateInterval(xv, i, interval) {\n  const val = xv[i];\n  let left = interval[0],\n      right = interval[1] + 1;\n\n  if (right >= xv.length) return;\n\n  // step right if distance to new right edge is <= distance to old left edge\n  // step when distance is equal to ensure movement over duplicate x values\n  while (i > left && (xv[right] - val) <= (val - xv[left])) {\n    interval[0] = ++left;\n    interval[1] = right;\n    ++right;\n  }\n}\n\n// generate smoothed output points\n// average points with repeated x values\nfunction output(xv, yhat, ux, uy) {\n  const n = xv.length, out = [];\n  let i = 0, cnt = 0, prev = [], v;\n\n  for (; i<n; ++i) {\n    v = xv[i] + ux;\n    if (prev[0] === v) {\n      // average output values via online update\n      prev[1] += (yhat[i] - prev[1]) / (++cnt);\n    } else {\n      // add new output point\n      cnt = 0;\n      prev[1] += uy;\n      prev = [v, yhat[i]];\n      out.push(prev);\n    }\n  }\n  prev[1] += uy;\n\n  return out;\n}\n","// subdivide up to accuracy of 0.5 degrees\nconst MIN_RADIANS = 0.5 * Math.PI / 180;\n\n// Adaptively sample an interpolated function over a domain extent\nexport default function(f, extent, minSteps, maxSteps) {\n  minSteps = minSteps || 25;\n  maxSteps = Math.max(minSteps, maxSteps || 200);\n\n  const point = x => [x, f(x)],\n        minX = extent[0],\n        maxX = extent[1],\n        span = maxX - minX,\n        stop = span / maxSteps,\n        prev = [point(minX)],\n        next = [];\n\n  if (minSteps === maxSteps) {\n    // no adaptation, sample uniform grid directly and return\n    for (let i = 1; i < maxSteps; ++i) {\n      prev.push(point(minX + (i / minSteps) * span));\n    }\n    prev.push(point(maxX));\n    return prev;\n  } else {\n    // sample minimum points on uniform grid\n    // then move on to perform adaptive refinement\n    next.push(point(maxX));\n    for (let i = minSteps; --i > 0;) {\n      next.push(point(minX + (i / minSteps) * span));\n    }\n  }\n\n  let p0 = prev[0];\n  let p1 = next[next.length - 1];\n\n  const sx = 1 / span;\n  const sy = scaleY(p0[1], next);\n\n  while (p1) {\n    // midpoint for potential curve subdivision\n    const pm = point((p0[0] + p1[0]) / 2);\n    const dx = pm[0] - p0[0] >= stop;\n\n    if (dx && angleDelta(p0, pm, p1, sx, sy) > MIN_RADIANS) {\n      // maximum resolution has not yet been met, and\n      // subdivision midpoint is sufficiently different from endpoint\n      // save subdivision, push midpoint onto the visitation stack\n      next.push(pm);\n    } else {\n      // subdivision midpoint sufficiently similar to endpoint\n      // skip subdivision, store endpoint, move to next point on the stack\n      p0 = p1;\n      prev.push(p1);\n      next.pop();\n    }\n    p1 = next[next.length - 1];\n  }\n\n  return prev;\n}\n\nfunction scaleY(init, points) {\n  let ymin = init;\n  let ymax = init;\n\n  const n = points.length;\n  for (let i = 0; i < n; ++i) {\n    const y = points[i][1];\n    if (y < ymin) ymin = y;\n    if (y > ymax) ymax = y;\n  }\n\n  return 1 / (ymax - ymin);\n}\n\nfunction angleDelta(p, q, r, sx, sy) {\n  const a0 = Math.atan2(sy * (r[1] - p[1]), sx * (r[0] - p[0])),\n        a1 = Math.atan2(sy * (q[1] - p[1]), sx * (q[0] - p[0]));\n  return Math.abs(a0 - a1);\n}\n","export default function(_) {\n  // determine range\n  const maxb = _.maxbins || 20,\n        base = _.base || 10,\n        logb = Math.log(base),\n        div  = _.divide || [5, 2];\n\n  let min  = _.extent[0],\n      max  = _.extent[1],\n      step, level, minstep, v, i, n;\n\n  const span = _.span || (max - min) || Math.abs(min) || 1;\n\n  if (_.step) {\n    // if step size is explicitly given, use that\n    step = _.step;\n  } else if (_.steps) {\n    // if provided, limit choice to acceptable step sizes\n    v = span / maxb;\n    for (i=0, n=_.steps.length; i < n && _.steps[i] < v; ++i);\n    step = _.steps[Math.max(0, i-1)];\n  } else {\n    // else use span to determine step size\n    level = Math.ceil(Math.log(maxb) / logb);\n    minstep = _.minstep || 0;\n    step = Math.max(\n      minstep,\n      Math.pow(base, Math.round(Math.log(span) / logb) - level)\n    );\n\n    // increase step size if too many bins\n    while (Math.ceil(span/step) > maxb) { step *= base; }\n\n    // decrease step size if allowed\n    for (i=0, n=div.length; i<n; ++i) {\n      v = step / div[i];\n      if (v >= minstep && span / v <= maxb) step = v;\n    }\n  }\n\n  // update precision, min and max\n  v = Math.log(step);\n  const precision = v >= 0 ? 0 : ~~(-v / logb) + 1,\n        eps = Math.pow(base, -precision - 1);\n  if (_.nice || _.nice === undefined) {\n    v = Math.floor(min / step + eps) * step;\n    min = min < v ? v - step : v;\n    max = Math.ceil(max / step) * step;\n  }\n\n  return {\n    start: min,\n    stop:  max === min ? min + step : max,\n    step:  step\n  };\n}\n","import numbers from './numbers';\nimport {random} from './random';\nimport {ascending, quantile} from 'd3-array';\n\nexport default function(array, samples, alpha, f) {\n  if (!array.length) return [undefined, undefined];\n\n  const values = Float64Array.from(numbers(array, f)),\n        n = values.length,\n        m = samples;\n  let a, i, j, mu;\n\n  for (j=0, mu=Array(m); j<m; ++j) {\n    for (a=0, i=0; i<n; ++i) {\n      a += values[~~(random() * n)];\n    }\n    mu[j] = a / n;\n  }\n\n  mu.sort(ascending);\n\n  return [\n    quantile(mu, alpha/2),\n    quantile(mu, 1-(alpha/2))\n  ];\n}\n","// Dot density binning for dot plot construction.\n// Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n// https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\nexport default function(array, step, smooth, f) {\n  f = f || (_ => _);\n\n  const n = array.length,\n        v = new Float64Array(n);\n\n  let i = 0, j = 1,\n      a = f(array[0]),\n      b = a,\n      w = a + step,\n      x;\n\n  for (; j<n; ++j) {\n    x = f(array[j]);\n    if (x >= w) {\n      b = (a + b) / 2;\n      for (; i<j; ++i) v[i] = b;\n      w = x + step;\n      a = x;\n    }\n    b = x;\n  }\n\n  b = (a + b) / 2;\n  for (; i<j; ++i) v[i] = b;\n\n  return smooth ? smoothing(v, step + step / 4) : v;\n}\n\n// perform smoothing to reduce variance\n// swap points between \"adjacent\" stacks\n// Wilkinson defines adjacent as within step/4 units\nfunction smoothing(v, thresh) {\n  const n = v.length;\n  let a = 0,\n      b = 1,\n      c, d;\n\n  // get left stack\n  while (v[a] === v[b]) ++b;\n\n  while (b < n) {\n    // get right stack\n    c = b + 1;\n    while (v[b] === v[c]) ++c;\n\n    // are stacks adjacent?\n    // if so, compare sizes and swap as needed\n    if (v[b] - v[b-1] < thresh) {\n      d = b + ((a + c - b - b) >> 1);\n      while (d < b) v[d++] = v[b];\n      while (d > b) v[d--] = v[a];\n    }\n\n    // update left stack indices\n    a = b;\n    b = c;\n  }\n\n  return v;\n}\n","import {random} from './random';\n\nexport default function(min, max) {\n  if (max == null) {\n    max = min;\n    min = 0;\n  }\n\n  let a, b, d;\n\n  const dist = {\n    min(_) {\n      if (arguments.length) {\n        a = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return a;\n      }\n    },\n    max(_) {\n      if (arguments.length) {\n        b = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return b;\n      }\n    },\n    sample() {\n      return a + Math.floor(d * random());\n    },\n    pdf(x) {\n      return (x === Math.floor(x) && x >= a && x < b) ? 1 / d : 0;\n    },\n    cdf(x) {\n      const v = Math.floor(x);\n      return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;\n    },\n    icdf(p) {\n      return (p >= 0 && p <= 1) ? a - 1 + Math.floor(p * d) : NaN;\n    }\n  };\n\n  return dist.min(min).max(max);\n}\n","import estimateBandwidth from './bandwidth';\nimport gaussian from './normal';\nimport {random} from './random';\n\nexport default function(support, bandwidth) {\n  const kernel = gaussian();\n  let n = 0;\n\n  const dist = {\n    data(_) {\n      if (arguments.length) {\n        support = _;\n        n = _ ? _.length : 0;\n        return dist.bandwidth(bandwidth);\n      } else {\n        return support;\n      }\n    },\n\n    bandwidth(_) {\n      if (!arguments.length) return bandwidth;\n      bandwidth = _;\n      if (!bandwidth && support) bandwidth = estimateBandwidth(support);\n      return dist;\n    },\n\n    sample() {\n      return support[~~(random() * n)] + bandwidth * kernel.sample();\n    },\n\n    pdf(x) {\n      let y = 0, i = 0;\n      for (; i<n; ++i) {\n        y += kernel.pdf((x - support[i]) / bandwidth);\n      }\n      return y / bandwidth / n;\n    },\n\n    cdf(x) {\n      let y = 0, i = 0;\n      for (; i<n; ++i) {\n        y += kernel.cdf((x - support[i]) / bandwidth);\n      }\n      return y / n;\n    },\n\n    icdf() {\n      throw Error('KDE icdf not supported.');\n    }\n  };\n\n  return dist.data(support);\n}\n","export default function(seed) {\n  // Random numbers using a Linear Congruential Generator with seed value\n  // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator\n  return function() {\n    seed = (1103515245 * seed + 12345) % 2147483647;\n    return seed / 2147483647;\n  };\n}\n","import {random} from './random';\n\nexport default function(dists, weights) {\n  let m = 0, w;\n\n  function normalize(x) {\n    const w = [];\n    let sum = 0, i;\n    for (i = 0; i < m; ++i) { sum += (w[i] = (x[i]==null ? 1 : +x[i])); }\n    for (i = 0; i < m; ++i) { w[i] /= sum; }\n    return w;\n  }\n\n  const dist = {\n    weights(_) {\n      if (arguments.length) {\n        w = normalize(weights = (_ || []));\n        return dist;\n      }\n      return weights;\n    },\n\n    distributions(_) {\n      if (arguments.length) {\n        if (_) {\n          m = _.length;\n          dists = _;\n        } else {\n          m = 0;\n          dists = [];\n        }\n        return dist.weights(weights);\n      }\n      return dists;\n    },\n\n    sample() {\n      const r = random();\n      let d = dists[m-1],\n          v = w[0],\n          i = 0;\n\n      // first select distribution\n      for (; i<m-1; v += w[++i]) {\n        if (r < v) { d = dists[i]; break; }\n      }\n      // then sample from it\n      return d.sample();\n    },\n\n    pdf(x) {\n      let p = 0, i = 0;\n      for (; i<m; ++i) {\n        p += w[i] * dists[i].pdf(x);\n      }\n      return p;\n    },\n\n    cdf(x) {\n      let p = 0, i = 0;\n      for (; i<m; ++i) {\n        p += w[i] * dists[i].cdf(x);\n      }\n      return p;\n    },\n\n    icdf() {\n      throw Error('Mixture icdf not supported.');\n    }\n  };\n\n  return dist.distributions(dists).weights(weights);\n}\n","import ols from './ols';\nimport {points, visitPoints} from './points';\nimport rSquared from './r-squared';\n\nexport default function(data, x, y) {\n  // eslint-disable-next-line no-unused-vars\n  const [xv, yv, ux, uy] = points(data, x, y);\n  let YL = 0, XY = 0, XYL = 0, X2Y = 0, n = 0, dx, ly, xy;\n\n  visitPoints(data, x, y, (_, dy) => {\n    dx = xv[n++];\n    ly = Math.log(dy);\n    xy = dx * dy;\n\n    YL += (dy * ly - YL) / n;\n    XY += (xy - XY) / n;\n    XYL += (xy * ly - XYL) / n;\n    X2Y += (dx * xy - X2Y) / n;\n  });\n\n  const [c0, c1] = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy),\n        predict = x => Math.exp(c0 + c1 * (x - ux));\n\n  return {\n    coef: [Math.exp(c0 - c1 * ux), c1],\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n","import quantile from \"./quantile.js\";\n\nexport default function median(values, valueof) {\n  return quantile(values, 0.5, valueof);\n}\n","import ols from './ols';\nimport {visitPoints} from './points';\nimport rSquared from './r-squared';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nexport default function(data, x, y) {\n  let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;\n\n  visitPoints(data, x, y, (dx, dy) => {\n    ++n;\n    dx = Math.log(dx);\n    X += (dx - X) / n;\n    Y += (dy - Y) / n;\n    XY += (dx * dy - XY) / n;\n    X2 += (dx * dx - X2) / n;\n  });\n\n  const coef = ols(X, Y, XY, X2),\n        predict = x => coef[0] + coef[1] * Math.log(x);\n\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, Y, predict)\n  };\n}\n","import ols from './ols';\nimport {visitPoints} from './points';\nimport rSquared from './r-squared';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nexport default function(data, x, y) {\n  let X = 0, Y = 0, XY = 0, X2 = 0, YS = 0, n = 0;\n\n  visitPoints(data, x, y, (dx, dy) => {\n    const lx = Math.log(dx),\n          ly = Math.log(dy);\n    ++n;\n    X += (lx - X) / n;\n    Y += (ly - Y) / n;\n    XY += (lx * ly - XY) / n;\n    X2 += (lx * lx - X2) / n;\n    YS += (dy - YS) / n;\n  });\n\n  const coef = ols(X, Y, XY, X2),\n        predict = x => coef[0] * Math.pow(x, coef[1]);\n\n  coef[0] = Math.exp(coef[0]);\n\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, YS, predict)\n  };\n}"],"names":["numbers$1","values","valueof","value","index","ascending","a","b","NaN","number","x","compareDefined","compare","ascendingDefined","TypeError","max","undefined","min","quickselect","array","k","left","right","length","arguments","n","m","z","Math","log","s","exp","sd","sqrt","floor","t","i","j","swap","quantile","p","Float64Array","from","numbers","i0","value0","subarray","quantiles","f","sort","map","_","quantileSorted","quartiles","estimateBandwidth","d","v","count","delta","mean","sum","variance","deviation","q","h","abs","pow","exports","random","SQRT2PI","PI","SQRT2","nextSample","sampleNormal","stdev","rds","c","y","densityNormal","cumulativeNormal","Z","cd","quantileNormal","w","Number","isFinite","Infinity","erfinv","gaussian","mu","sigma","dist","sample","pdf","cdf","icdf","sampleLogNormal","densityLogNormal","cumulativeLogNormal","quantileLogNormal","sampleUniform","densityUniform","cumulativeUniform","quantileUniform","ols","uX","uY","uXY","uX2","slope","points","data","filter","u","X","Y","xv","yv","ux","uy","visitPoints","callback","rSquared","predict","SSE","SST","dx","dy","sse","sst","linear","XY","X2","coef","quad","x2","X3","X4","X2Y","X2X2","uncenter","Array","tricube","updateInterval","interval","val","MIN_RADIANS","angleDelta","r","sx","sy","a0","atan2","a1","maxb","maxbins","base","logb","div","divide","step","level","minstep","extent","span","steps","ceil","round","precision","eps","nice","start","stop","samples","alpha","smooth","thresh","smoothing","support","bandwidth","kernel","Error","seed","dists","weights","normalize","distributions","YL","ly","xy","XYL","c0","c1","bw","yhat","residuals","robustWeights","fill","iter","i1","edge","W","denom","xk","yk","xkw","medianResidual","median","arg","output","out","cnt","prev","push","order","lhs","rhs","l","matrix","gaussianElimination","YS","lx","minSteps","maxSteps","point","minX","maxX","next","p0","p1","init","ymin","ymax","scaleY","pm","pop"],"mappings":"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"}